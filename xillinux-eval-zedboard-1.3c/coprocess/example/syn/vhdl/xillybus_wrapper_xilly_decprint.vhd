-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xillybus_wrapper_xilly_decprint is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    val_r : IN STD_LOGIC_VECTOR (31 downto 0);
    debug_ready : IN STD_LOGIC_VECTOR (7 downto 0);
    debug_out : OUT STD_LOGIC_VECTOR (7 downto 0);
    debug_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of xillybus_wrapper_xilly_decprint is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_25 : BOOLEAN;
    signal powers10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal powers10_ce0 : STD_LOGIC;
    signal powers10_q0 : STD_LOGIC_VECTOR (27 downto 0);
    signal first_2_cast1_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_2_cast1_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_48 : BOOLEAN;
    signal i_fu_146_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_279 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_reg_284 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_157_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_reg_294 : STD_LOGIC_VECTOR (4 downto 0);
    signal powers10_load_cast_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal powers10_load_cast_reg_299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_71 : BOOLEAN;
    signal x_1_fu_177_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_80 : BOOLEAN;
    signal first_1_fu_217_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_95 : BOOLEAN;
    signal p_rec_i_fu_238_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_rec_i_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal out_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_load_reg_328 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_106 : BOOLEAN;
    signal out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_ce0 : STD_LOGIC;
    signal out_we0 : STD_LOGIC;
    signal out_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal first_reg_85 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_2_reg_97 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_reg_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_rec_i_reg_119 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_138 : BOOLEAN;
    signal tmp_2_fu_254_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_i_cast_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal v_fu_32 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_1_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_193_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal powers10_load_cast2_fu_161_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_6_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_224_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_i_fu_228_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_i_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component xillybus_wrapper_xilly_decprint_powers10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component xillybus_wrapper_xilly_decprint_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    powers10_U : component xillybus_wrapper_xilly_decprint_powers10
    generic map (
        DataWidth => 28,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => powers10_address0,
        ce0 => powers10_ce0,
        q0 => powers10_q0);

    out_U : component xillybus_wrapper_xilly_decprint_out
    generic map (
        DataWidth => 8,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => out_address0,
        ce0 => out_ce0,
        we0 => out_we0,
        d0 => out_d0,
        q0 => out_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- first_2_reg_97 assign process. --
    first_2_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_4_fu_172_p2)))) then 
                first_2_reg_97 <= i_reg_279;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                first_2_reg_97 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- first_reg_85 assign process. --
    first_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_4_fu_172_p2)))) then 
                first_reg_85 <= first_1_fu_217_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                first_reg_85 <= ap_const_lv32_9;
            end if; 
        end if;
    end process;

    -- p_0_rec_i_reg_119 assign process. --
    p_0_rec_i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_2_fu_254_p1)))) then 
                p_0_rec_i_reg_119 <= p_rec_i_reg_323;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_140_p2 = ap_const_lv1_0)))) then 
                p_0_rec_i_reg_119 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    -- v_fu_32 assign process. --
    v_fu_32_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_4_fu_172_p2))) then 
                v_fu_32 <= v_1_fu_183_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                v_fu_32 <= val_r;
            end if; 
        end if;
    end process;

    -- x_reg_108 assign process. --
    x_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
                x_reg_108 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and (ap_const_lv1_0 = tmp_4_fu_172_p2))) then 
                x_reg_108 <= x_1_fu_177_p2;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                    first_2_cast1_reg_270(3 downto 0) <= first_2_cast1_fu_136_p1(3 downto 0);
                i_reg_279 <= i_fu_146_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                out_load_reg_328 <= out_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                p_rec_i_reg_323 <= p_rec_i_fu_238_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                    powers10_load_cast_reg_299(29 downto 0) <= powers10_load_cast_fu_165_p1(29 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_140_p2 = ap_const_lv1_0))) then
                    tmp_3_reg_284(3 downto 0) <= tmp_3_fu_152_p1(3 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_140_p2 = ap_const_lv1_0)))) then
                tmp_reg_294 <= tmp_fu_157_p1;
            end if;
        end if;
    end process;
    first_2_cast1_reg_270(31 downto 4) <= "0000000000000000000000000000";
    tmp_3_reg_284(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    powers10_load_cast_reg_299(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_140_p2, tmp_4_fu_172_p2, tmp_2_fu_254_p1, tmp1_i_fu_244_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_140_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_lv1_0 = tmp_4_fu_172_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_lv1_0 = tmp1_i_fu_244_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = tmp_2_fu_254_p1))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st6_fsm_5, tmp1_i_fu_244_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp1_i_fu_244_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st6_fsm_5, tmp1_i_fu_244_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) and not((ap_const_lv1_0 = tmp1_i_fu_244_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_106 assign process. --
    ap_sig_bdd_106_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_106 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_138 assign process. --
    ap_sig_bdd_138_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_138 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_25 assign process. --
    ap_sig_bdd_25_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_25 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_48 assign process. --
    ap_sig_bdd_48_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_48 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_71 assign process. --
    ap_sig_bdd_71_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_71 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_80 assign process. --
    ap_sig_bdd_80_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_80 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_95 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_25)
    begin
        if (ap_sig_bdd_25) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_48)
    begin
        if (ap_sig_bdd_48) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_71)
    begin
        if (ap_sig_bdd_71) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_80)
    begin
        if (ap_sig_bdd_80) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_95)
    begin
        if (ap_sig_bdd_95) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_106)
    begin
        if (ap_sig_bdd_106) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_138)
    begin
        if (ap_sig_bdd_138) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;

    debug_out <= out_load_reg_328;

    -- debug_out_ap_vld assign process. --
    debug_out_ap_vld_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6, tmp_2_fu_254_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) and not((ap_const_lv1_0 = tmp_2_fu_254_p1)))) then 
            debug_out_ap_vld <= ap_const_logic_1;
        else 
            debug_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_140_p2 <= "1" when (first_2_reg_97 = ap_const_lv4_A) else "0";
    first_1_fu_217_p3 <= 
        first_2_cast1_reg_270 when (or_cond_fu_211_p2(0) = '1') else 
        first_reg_85;
    first_2_cast1_fu_136_p1 <= std_logic_vector(resize(unsigned(first_2_reg_97),32));
    i_fu_146_p2 <= std_logic_vector(unsigned(first_2_reg_97) + unsigned(ap_const_lv4_1));
    or_cond_fu_211_p2 <= (tmp_6_fu_200_p2 and tmp_7_fu_206_p2);

    -- out_address0 assign process. --
    out_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_3_reg_284, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, sum_i_cast_fu_233_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            out_address0 <= tmp_3_reg_284(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            out_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            out_address0 <= sum_i_cast_fu_233_p1(4 - 1 downto 0);
        else 
            out_address0 <= "XXXX";
        end if; 
    end process;


    -- out_ce0 assign process. --
    out_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            out_ce0 <= ap_const_logic_1;
        else 
            out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- out_d0 assign process. --
    out_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, tmp_5_fu_193_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            out_d0 <= tmp_5_fu_193_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            out_d0 <= ap_const_lv8_0;
        else 
            out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- out_we0 assign process. --
    out_we0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_140_p2, ap_sig_cseq_ST_st4_fsm_3, tmp_4_fu_172_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_140_p2 = ap_const_lv1_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_4_fu_172_p2))))) then 
            out_we0 <= ap_const_logic_1;
        else 
            out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_rec_i_fu_238_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(p_0_rec_i_reg_119));
    powers10_address0 <= tmp_3_fu_152_p1(4 - 1 downto 0);

    -- powers10_ce0 assign process. --
    powers10_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            powers10_ce0 <= ap_const_logic_1;
        else 
            powers10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        powers10_load_cast2_fu_161_p1 <= std_logic_vector(resize(signed(powers10_q0),30));

    powers10_load_cast_fu_165_p1 <= std_logic_vector(resize(unsigned(powers10_load_cast2_fu_161_p1),32));
    sum_i_cast_fu_233_p1 <= std_logic_vector(resize(unsigned(sum_i_fu_228_p2),64));
    sum_i_fu_228_p2 <= std_logic_vector(unsigned(tmp_1_fu_224_p1) + unsigned(tmp_reg_294));
    tmp1_i_fu_244_p2 <= "1" when (out_q0 = ap_const_lv8_0) else "0";
    tmp_1_fu_224_p1 <= p_0_rec_i_reg_119(5 - 1 downto 0);
    tmp_2_fu_254_p1 <= debug_ready(1 - 1 downto 0);
    tmp_3_fu_152_p1 <= std_logic_vector(resize(unsigned(first_2_reg_97),64));
    tmp_4_fu_172_p2 <= "1" when (unsigned(v_fu_32) < unsigned(powers10_load_cast_reg_299)) else "0";
    tmp_5_fu_193_p2 <= (x_reg_108 or ap_const_lv8_30);
    tmp_6_fu_200_p2 <= "0" when (x_reg_108 = ap_const_lv8_0) else "1";
    tmp_7_fu_206_p2 <= "1" when (signed(first_reg_85) > signed(first_2_cast1_reg_270)) else "0";
    tmp_fu_157_p1 <= first_reg_85(5 - 1 downto 0);
    v_1_fu_183_p2 <= std_logic_vector(unsigned(v_fu_32) - unsigned(powers10_load_cast_reg_299));
    x_1_fu_177_p2 <= std_logic_vector(unsigned(x_reg_108) + unsigned(ap_const_lv8_1));
end behav;
