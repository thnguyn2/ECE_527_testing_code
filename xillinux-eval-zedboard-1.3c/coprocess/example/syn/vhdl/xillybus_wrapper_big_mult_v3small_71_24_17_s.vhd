-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity xillybus_wrapper_big_mult_v3small_71_24_17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V : IN STD_LOGIC_VECTOR (70 downto 0);
    b_V : IN STD_LOGIC_VECTOR (23 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (94 downto 0) );
end;


architecture behav of xillybus_wrapper_big_mult_v3small_71_24_17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv71_7FFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (70 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv7_5E : STD_LOGIC_VECTOR (6 downto 0) := "1011110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (94 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv95_0 : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_32 : BOOLEAN;
    signal tmp_fu_202_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_reg_593 : STD_LOGIC_VECTOR (40 downto 0);
    signal i_4_fu_212_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_601 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_54 : BOOLEAN;
    signal Lo_assign_fu_224_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal Lo_assign_reg_606 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond2_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ui_fu_240_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal Ui_reg_615 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_33_fu_328_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_33_reg_627 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_75 : BOOLEAN;
    signal tmp_6_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_reg_635 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_84 : BOOLEAN;
    signal exitcond3_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_368_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_650 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_401_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_reg_658 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal exitcond_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_444_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_37_reg_673 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_120 : BOOLEAN;
    signal tmp_38_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_678 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_464_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_41_reg_683 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_42_fu_472_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_42_reg_688 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_fu_480_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_43_reg_693 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_29_fu_565_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_137 : BOOLEAN;
    signal pp_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal pp_V_ce0 : STD_LOGIC;
    signal pp_V_we0 : STD_LOGIC;
    signal pp_V_d0 : STD_LOGIC_VECTOR (40 downto 0);
    signal pp_V_q0 : STD_LOGIC_VECTOR (40 downto 0);
    signal pps_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal pps_V_ce0 : STD_LOGIC;
    signal pps_V_we0 : STD_LOGIC;
    signal pps_V_d0 : STD_LOGIC_VECTOR (40 downto 0);
    signal pps_V_q0 : STD_LOGIC_VECTOR (40 downto 0);
    signal i_reg_154 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_165 : BOOLEAN;
    signal i_1_reg_166 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_176 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_183 : BOOLEAN;
    signal p_Val2_s_reg_177 : STD_LOGIC_VECTOR (94 downto 0);
    signal i_2_reg_189 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_332_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_9_fu_388_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_s_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_234_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_261_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_270_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_252_p4 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_22_fu_265_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_fu_274_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_289_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_296_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_fu_282_p3 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_28_fu_302_p1 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_29_fu_306_p1 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_30_fu_310_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_31_fu_316_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal p_Result_30_fu_322_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal grp_fu_332_p0 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_332_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_285 : BOOLEAN;
    signal tmp_34_fu_353_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_357_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_fu_374_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal r_V_4_fu_384_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_36_fu_412_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal Li_fu_416_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal Li_cast1_fu_426_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal Ui_1_fu_434_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal Li_cast_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Ui_1_cast_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_454_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_40_fu_458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_44_fu_491_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal loc_V_fu_488_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_45_fu_496_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_48_fu_506_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_49_fu_512_p4 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_46_fu_499_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_47_fu_502_p1 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_51_fu_529_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_52_fu_535_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal p_demorgan_fu_541_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_53_fu_547_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_50_fu_522_p3 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_54_fu_553_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal tmp_55_fu_559_p2 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_398 : BOOLEAN;
    signal tmp_35_fu_571_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_332_ce : STD_LOGIC;
    signal p_Result_s_fu_575_p5 : STD_LOGIC_VECTOR (94 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (94 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component xillybus_wrapper_mul_41s_24ns_41_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (40 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component xillybus_wrapper_big_mult_v3small_71_24_17_s_pp_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (40 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;



begin
    pp_V_U : component xillybus_wrapper_big_mult_v3small_71_24_17_s_pp_V
    generic map (
        DataWidth => 41,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pp_V_address0,
        ce0 => pp_V_ce0,
        we0 => pp_V_we0,
        d0 => pp_V_d0,
        q0 => pp_V_q0);

    pps_V_U : component xillybus_wrapper_big_mult_v3small_71_24_17_s_pp_V
    generic map (
        DataWidth => 41,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pps_V_address0,
        ce0 => pps_V_ce0,
        we0 => pps_V_we0,
        d0 => pps_V_d0,
        q0 => pps_V_q0);

    xillybus_wrapper_mul_41s_24ns_41_4_U6 : component xillybus_wrapper_mul_41s_24ns_41_4
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 41,
        din1_WIDTH => 24,
        dout_WIDTH => 41)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_332_p0,
        din1 => grp_fu_332_p1,
        ce => grp_fu_332_ce,
        dout => grp_fu_332_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_return_preg assign process. --
    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv95_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
                    ap_return_preg <= p_Result_s_fu_575_p5;
                end if; 
            end if;
        end if;
    end process;


    -- i_1_reg_166 assign process. --
    i_1_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
                i_1_reg_166 <= i_3_reg_650;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
                i_1_reg_166 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    -- i_2_reg_189 assign process. --
    i_2_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and not((ap_const_lv1_0 = exitcond3_fu_342_p2)))) then 
                i_2_reg_189 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
                i_2_reg_189 <= tmp_1_reg_658;
            end if; 
        end if;
    end process;

    -- i_reg_154 assign process. --
    i_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_154 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
                i_reg_154 <= i_4_reg_601;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond2_fu_206_p2 = ap_const_lv1_0))) then
                    Lo_assign_reg_606(2 downto 0) <= Lo_assign_fu_224_p4(2 downto 0);    Lo_assign_reg_606(6 downto 4) <= Lo_assign_fu_224_p4(6 downto 4);
                Ui_reg_615 <= Ui_fu_240_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) and (ap_const_lv1_0 = exitcond3_fu_342_p2))) then
                i_3_reg_650 <= i_3_fu_368_p2;
                    tmp_6_reg_635(2 downto 0) <= tmp_6_fu_348_p1(2 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                i_4_reg_601 <= i_4_fu_212_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then
                p_Val2_s_reg_177 <= p_Result_29_fu_565_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_1_reg_658 <= tmp_1_fu_401_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                tmp_33_reg_627 <= tmp_33_fu_328_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_37_reg_673 <= tmp_37_fu_444_p1;
                tmp_38_reg_678 <= tmp_38_fu_448_p2;
                tmp_41_reg_683 <= tmp_41_fu_464_p3;
                tmp_42_reg_688 <= tmp_42_fu_472_p3;
                tmp_43_reg_693 <= tmp_43_fu_480_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                    tmp_reg_593(23 downto 0) <= tmp_fu_202_p1(23 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_593(40 downto 24) <= "00000000000000000";
    Lo_assign_reg_606(3) <= '0';
    tmp_6_reg_635(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond2_fu_206_p2, exitcond3_fu_342_p2, exitcond_fu_395_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond2_fu_206_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_lv1_0 = exitcond3_fu_342_p2))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_lv1_0 = exitcond_fu_395_p2))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    Li_cast1_fu_426_p1 <= std_logic_vector(resize(unsigned(Li_fu_416_p4),7));
    Li_cast_fu_430_p1 <= std_logic_vector(resize(unsigned(Li_fu_416_p4),32));
    Li_fu_416_p4 <= ((tmp_36_fu_412_p1 & ap_const_lv1_0) & i_2_reg_189);
    Lo_assign_fu_224_p4 <= ((i_reg_154 & ap_const_lv1_0) & i_reg_154);
    Ui_1_cast_fu_440_p1 <= std_logic_vector(resize(unsigned(Ui_1_fu_434_p2),32));
    Ui_1_fu_434_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(Li_cast1_fu_426_p1));
    Ui_fu_240_p3 <= 
        ap_const_lv7_46 when (tmp_s_fu_218_p2(0) = '1') else 
        tmp_2_fu_234_p2;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st14_fsm_13)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_return assign process. --
    ap_return_assign_proc : process(ap_sig_cseq_ST_st14_fsm_13, p_Result_s_fu_575_p5, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            ap_return <= p_Result_s_fu_575_p5;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_120 assign process. --
    ap_sig_bdd_120_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_120 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_137 assign process. --
    ap_sig_bdd_137_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_137 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_165 assign process. --
    ap_sig_bdd_165_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_165 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_176 assign process. --
    ap_sig_bdd_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_176 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_183 assign process. --
    ap_sig_bdd_183_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_183 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_285 assign process. --
    ap_sig_bdd_285_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_285 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_32 assign process. --
    ap_sig_bdd_32_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_32 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_398 assign process. --
    ap_sig_bdd_398_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_398 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_54 assign process. --
    ap_sig_bdd_54_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_54 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_75 assign process. --
    ap_sig_bdd_75_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_75 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_84 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_183)
    begin
        if (ap_sig_bdd_183) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_120)
    begin
        if (ap_sig_bdd_120) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_137)
    begin
        if (ap_sig_bdd_137) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_398)
    begin
        if (ap_sig_bdd_398) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_32)
    begin
        if (ap_sig_bdd_32) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_54)
    begin
        if (ap_sig_bdd_54) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_75)
    begin
        if (ap_sig_bdd_75) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_285)
    begin
        if (ap_sig_bdd_285) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_165)
    begin
        if (ap_sig_bdd_165) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_176)
    begin
        if (ap_sig_bdd_176) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_84)
    begin
        if (ap_sig_bdd_84) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_206_p2 <= "1" when (i_reg_154 = ap_const_lv3_5) else "0";
    exitcond3_fu_342_p2 <= "1" when (i_1_reg_166 = ap_const_lv3_5) else "0";
    exitcond_fu_395_p2 <= "1" when (i_2_reg_189 = ap_const_lv3_4) else "0";
    grp_fu_332_ce <= ap_const_logic_1;
    grp_fu_332_p0 <= tmp_33_reg_627;
    grp_fu_332_p1 <= tmp_reg_593(24 - 1 downto 0);
    i_3_fu_368_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_1_reg_166));
    i_4_fu_212_p2 <= std_logic_vector(unsigned(i_reg_154) + unsigned(ap_const_lv3_1));
    loc_V_fu_488_p1 <= std_logic_vector(resize(unsigned(tmp_37_reg_673),95));
    p_Result_29_fu_565_p2 <= (tmp_54_fu_553_p2 or tmp_55_fu_559_p2);
    p_Result_30_fu_322_p2 <= (tmp_30_fu_310_p2 and tmp_31_fu_316_p2);
    p_Result_s_fu_575_p5 <= (tmp_35_fu_571_p1 & p_Val2_s_reg_177(67 downto 0));
    p_demorgan_fu_541_p2 <= (tmp_51_fu_529_p2 and tmp_52_fu_535_p2);

    -- pp_V_address0 assign process. --
    pp_V_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_6_fu_348_p1, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st7_fsm_6, tmp_3_fu_337_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            pp_V_address0 <= tmp_3_fu_337_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            pp_V_address0 <= tmp_6_fu_348_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            pp_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            pp_V_address0 <= "XXX";
        end if; 
    end process;


    -- pp_V_ce0 assign process. --
    pp_V_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            pp_V_ce0 <= ap_const_logic_1;
        else 
            pp_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pp_V_d0 <= grp_fu_332_p2;

    -- pp_V_we0 assign process. --
    pp_V_we0_assign_proc : process(ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then 
            pp_V_we0 <= ap_const_logic_1;
        else 
            pp_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pps_V_address0 assign process. --
    pps_V_address0_assign_proc : process(tmp_6_reg_635, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_395_p2, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, tmp_8_fu_363_p1, tmp_4_fu_407_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            pps_V_address0 <= tmp_6_reg_635(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            pps_V_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_395_p2)))) then 
            pps_V_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond_fu_395_p2))) then 
            pps_V_address0 <= tmp_4_fu_407_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            pps_V_address0 <= tmp_8_fu_363_p1(3 - 1 downto 0);
        else 
            pps_V_address0 <= "XXX";
        end if; 
    end process;


    -- pps_V_ce0 assign process. --
    pps_V_ce0_assign_proc : process(ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st11_fsm_10, exitcond_fu_395_p2, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and (ap_const_lv1_0 = exitcond_fu_395_p2)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) and not((ap_const_lv1_0 = exitcond_fu_395_p2))) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            pps_V_ce0 <= ap_const_logic_1;
        else 
            pps_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- pps_V_d0 assign process. --
    pps_V_d0_assign_proc : process(pp_V_q0, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, tmp_9_fu_388_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            pps_V_d0 <= tmp_9_fu_388_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            pps_V_d0 <= pp_V_q0;
        else 
            pps_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- pps_V_we0 assign process. --
    pps_V_we0_assign_proc : process(ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9))) then 
            pps_V_we0 <= ap_const_logic_1;
        else 
            pps_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_V_4_fu_384_p1 <= std_logic_vector(resize(unsigned(r_V_fu_374_p4),41));
    r_V_fu_374_p4 <= pps_V_q0(40 downto 17);
    tmp_19_fu_248_p2 <= "1" when (unsigned(Lo_assign_reg_606) > unsigned(Ui_reg_615)) else "0";
    tmp_1_fu_401_p2 <= std_logic_vector(unsigned(i_2_reg_189) + unsigned(ap_const_lv3_1));
    
    tmp_20_fu_252_p4_proc : process(a_V)
    variable vlo_cpy : STD_LOGIC_VECTOR(71+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(71+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(71 - 1 downto 0);
    variable tmp_20_fu_252_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(71 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(71 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(71 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_46(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := a_V;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(71-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(71-1-unsigned(ap_const_lv32_46(7-1 downto 0)));
            for tmp_20_fu_252_p4_i in 0 to 71-1 loop
                v0_cpy(tmp_20_fu_252_p4_i) := a_V(71-1-tmp_20_fu_252_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(71-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_20_fu_252_p4 <= resvalue(71-1 downto 0);
    end process;

    tmp_21_fu_261_p2 <= std_logic_vector(unsigned(Lo_assign_reg_606) - unsigned(Ui_reg_615));
    tmp_22_fu_265_p2 <= std_logic_vector(signed(ap_const_lv7_46) - signed(Lo_assign_reg_606));
    tmp_23_fu_270_p2 <= std_logic_vector(unsigned(Ui_reg_615) - unsigned(Lo_assign_reg_606));
    tmp_24_fu_274_p3 <= 
        tmp_21_fu_261_p2 when (tmp_19_fu_248_p2(0) = '1') else 
        tmp_23_fu_270_p2;
    tmp_25_fu_282_p3 <= 
        tmp_20_fu_252_p4 when (tmp_19_fu_248_p2(0) = '1') else 
        a_V;
    tmp_26_fu_289_p3 <= 
        tmp_22_fu_265_p2 when (tmp_19_fu_248_p2(0) = '1') else 
        Lo_assign_reg_606;
    tmp_27_fu_296_p2 <= std_logic_vector(signed(ap_const_lv7_46) - signed(tmp_24_fu_274_p3));
    tmp_28_fu_302_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_289_p3),71));
    tmp_29_fu_306_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_296_p2),71));
    tmp_2_fu_234_p2 <= std_logic_vector(unsigned(ap_const_lv7_10) + unsigned(Lo_assign_fu_224_p4));
    tmp_30_fu_310_p2 <= std_logic_vector(shift_right(unsigned(tmp_25_fu_282_p3),to_integer(unsigned('0' & tmp_28_fu_302_p1(31-1 downto 0)))));
    tmp_31_fu_316_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv71_7FFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_29_fu_306_p1(31-1 downto 0)))));
    tmp_33_fu_328_p1 <= p_Result_30_fu_322_p2(41 - 1 downto 0);
    tmp_34_fu_353_p1 <= i_1_reg_166(2 - 1 downto 0);
    tmp_35_fu_571_p1 <= pps_V_q0(27 - 1 downto 0);
    tmp_36_fu_412_p1 <= i_2_reg_189(2 - 1 downto 0);
    tmp_37_fu_444_p1 <= pps_V_q0(17 - 1 downto 0);
    tmp_38_fu_448_p2 <= "1" when (unsigned(Li_cast_fu_430_p1) > unsigned(Ui_1_cast_fu_440_p1)) else "0";
    tmp_39_fu_454_p1 <= std_logic_vector(resize(unsigned(Li_fu_416_p4),7));
    tmp_3_fu_337_p1 <= std_logic_vector(resize(unsigned(i_reg_154),64));
    tmp_40_fu_458_p2 <= std_logic_vector(signed(ap_const_lv7_5E) - signed(tmp_39_fu_454_p1));
    tmp_41_fu_464_p3 <= 
        tmp_39_fu_454_p1 when (tmp_38_fu_448_p2(0) = '1') else 
        Ui_1_fu_434_p2;
    tmp_42_fu_472_p3 <= 
        Ui_1_fu_434_p2 when (tmp_38_fu_448_p2(0) = '1') else 
        tmp_39_fu_454_p1;
    tmp_43_fu_480_p3 <= 
        tmp_40_fu_458_p2 when (tmp_38_fu_448_p2(0) = '1') else 
        tmp_39_fu_454_p1;
    tmp_44_fu_491_p2 <= std_logic_vector(signed(ap_const_lv7_5E) - signed(tmp_41_reg_683));
    tmp_45_fu_496_p1 <= std_logic_vector(resize(unsigned(tmp_43_reg_693),95));
    tmp_46_fu_499_p1 <= std_logic_vector(resize(unsigned(tmp_42_reg_688),95));
    tmp_47_fu_502_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_491_p2),95));
    tmp_48_fu_506_p2 <= std_logic_vector(shift_left(unsigned(loc_V_fu_488_p1),to_integer(unsigned('0' & tmp_45_fu_496_p1(31-1 downto 0)))));
    
    tmp_49_fu_512_p4_proc : process(tmp_48_fu_506_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(95+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(95+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(95 - 1 downto 0);
    variable tmp_49_fu_512_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(95 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(95 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(95 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_5E(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_48_fu_506_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(95-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(95-1-unsigned(ap_const_lv32_5E(7-1 downto 0)));
            for tmp_49_fu_512_p4_i in 0 to 95-1 loop
                v0_cpy(tmp_49_fu_512_p4_i) := tmp_48_fu_506_p2(95-1-tmp_49_fu_512_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(95-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_49_fu_512_p4 <= resvalue(95-1 downto 0);
    end process;

    tmp_4_fu_407_p1 <= std_logic_vector(resize(unsigned(i_2_reg_189),64));
    tmp_50_fu_522_p3 <= 
        tmp_49_fu_512_p4 when (tmp_38_reg_678(0) = '1') else 
        tmp_48_fu_506_p2;
    tmp_51_fu_529_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_46_fu_499_p1(31-1 downto 0)))));
    tmp_52_fu_535_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_47_fu_502_p1(31-1 downto 0)))));
    tmp_53_fu_547_p2 <= (p_demorgan_fu_541_p2 xor ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF);
    tmp_54_fu_553_p2 <= (p_Val2_s_reg_177 and tmp_53_fu_547_p2);
    tmp_55_fu_559_p2 <= (tmp_50_fu_522_p3 and p_demorgan_fu_541_p2);
    tmp_6_fu_348_p1 <= std_logic_vector(resize(unsigned(i_1_reg_166),64));
    tmp_7_fu_357_p2 <= std_logic_vector(signed(ap_const_lv2_3) + signed(tmp_34_fu_353_p1));
    tmp_8_fu_363_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_357_p2),64));
    tmp_9_fu_388_p2 <= std_logic_vector(unsigned(r_V_4_fu_384_p1) + unsigned(pp_V_q0));
    tmp_fu_202_p1 <= std_logic_vector(resize(unsigned(b_V),41));
    tmp_s_fu_218_p2 <= "1" when (i_reg_154 = ap_const_lv3_4) else "0";
end behav;
