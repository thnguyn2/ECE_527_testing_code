// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _xillybus_wrapper_xilly_decprint_HH_
#define _xillybus_wrapper_xilly_decprint_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "xillybus_wrapper_xilly_decprint_powers10.h"
#include "xillybus_wrapper_xilly_decprint_out.h"

namespace ap_rtl {

struct xillybus_wrapper_xilly_decprint : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > val_r;
    sc_in< sc_lv<8> > debug_ready;
    sc_out< sc_lv<8> > debug_out;
    sc_out< sc_logic > debug_out_ap_vld;


    // Module declarations
    xillybus_wrapper_xilly_decprint(sc_module_name name);
    SC_HAS_PROCESS(xillybus_wrapper_xilly_decprint);

    ~xillybus_wrapper_xilly_decprint();

    sc_trace_file* mVcdFile;

    xillybus_wrapper_xilly_decprint_powers10* powers10_U;
    xillybus_wrapper_xilly_decprint_out* out_U;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_25;
    sc_signal< sc_lv<4> > powers10_address0;
    sc_signal< sc_logic > powers10_ce0;
    sc_signal< sc_lv<28> > powers10_q0;
    sc_signal< sc_lv<32> > first_2_cast1_fu_136_p1;
    sc_signal< sc_lv<32> > first_2_cast1_reg_270;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_48;
    sc_signal< sc_lv<4> > i_fu_146_p2;
    sc_signal< sc_lv<4> > i_reg_279;
    sc_signal< sc_lv<64> > tmp_3_fu_152_p1;
    sc_signal< sc_lv<64> > tmp_3_reg_284;
    sc_signal< sc_lv<1> > exitcond_fu_140_p2;
    sc_signal< sc_lv<5> > tmp_fu_157_p1;
    sc_signal< sc_lv<5> > tmp_reg_294;
    sc_signal< sc_lv<32> > powers10_load_cast_fu_165_p1;
    sc_signal< sc_lv<32> > powers10_load_cast_reg_299;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_71;
    sc_signal< sc_lv<8> > x_1_fu_177_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_80;
    sc_signal< sc_lv<32> > first_1_fu_217_p3;
    sc_signal< sc_lv<1> > tmp_4_fu_172_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_95;
    sc_signal< sc_lv<64> > p_rec_i_fu_238_p2;
    sc_signal< sc_lv<64> > p_rec_i_reg_323;
    sc_signal< sc_lv<8> > out_q0;
    sc_signal< sc_lv<8> > out_load_reg_328;
    sc_signal< sc_logic > ap_sig_cseq_ST_st6_fsm_5;
    sc_signal< bool > ap_sig_bdd_106;
    sc_signal< sc_lv<4> > out_address0;
    sc_signal< sc_logic > out_ce0;
    sc_signal< sc_logic > out_we0;
    sc_signal< sc_lv<8> > out_d0;
    sc_signal< sc_lv<32> > first_reg_85;
    sc_signal< sc_lv<4> > first_2_reg_97;
    sc_signal< sc_lv<8> > x_reg_108;
    sc_signal< sc_lv<64> > p_0_rec_i_reg_119;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_bdd_138;
    sc_signal< sc_lv<1> > tmp_2_fu_254_p1;
    sc_signal< sc_lv<64> > sum_i_cast_fu_233_p1;
    sc_signal< sc_lv<32> > v_fu_32;
    sc_signal< sc_lv<32> > v_1_fu_183_p2;
    sc_signal< sc_lv<8> > tmp_5_fu_193_p2;
    sc_signal< sc_lv<30> > powers10_load_cast2_fu_161_p1;
    sc_signal< sc_lv<1> > tmp_6_fu_200_p2;
    sc_signal< sc_lv<1> > tmp_7_fu_206_p2;
    sc_signal< sc_lv<1> > or_cond_fu_211_p2;
    sc_signal< sc_lv<5> > tmp_1_fu_224_p1;
    sc_signal< sc_lv<5> > sum_i_fu_228_p2;
    sc_signal< sc_lv<1> > tmp1_i_fu_244_p2;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_st1_fsm_0;
    static const sc_lv<7> ap_ST_st2_fsm_1;
    static const sc_lv<7> ap_ST_st3_fsm_2;
    static const sc_lv<7> ap_ST_st4_fsm_3;
    static const sc_lv<7> ap_ST_st5_fsm_4;
    static const sc_lv<7> ap_ST_st6_fsm_5;
    static const sc_lv<7> ap_ST_st7_fsm_6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_30;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_106();
    void thread_ap_sig_bdd_138();
    void thread_ap_sig_bdd_25();
    void thread_ap_sig_bdd_48();
    void thread_ap_sig_bdd_71();
    void thread_ap_sig_bdd_80();
    void thread_ap_sig_bdd_95();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st6_fsm_5();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_debug_out();
    void thread_debug_out_ap_vld();
    void thread_exitcond_fu_140_p2();
    void thread_first_1_fu_217_p3();
    void thread_first_2_cast1_fu_136_p1();
    void thread_i_fu_146_p2();
    void thread_or_cond_fu_211_p2();
    void thread_out_address0();
    void thread_out_ce0();
    void thread_out_d0();
    void thread_out_we0();
    void thread_p_rec_i_fu_238_p2();
    void thread_powers10_address0();
    void thread_powers10_ce0();
    void thread_powers10_load_cast2_fu_161_p1();
    void thread_powers10_load_cast_fu_165_p1();
    void thread_sum_i_cast_fu_233_p1();
    void thread_sum_i_fu_228_p2();
    void thread_tmp1_i_fu_244_p2();
    void thread_tmp_1_fu_224_p1();
    void thread_tmp_2_fu_254_p1();
    void thread_tmp_3_fu_152_p1();
    void thread_tmp_4_fu_172_p2();
    void thread_tmp_5_fu_193_p2();
    void thread_tmp_6_fu_200_p2();
    void thread_tmp_7_fu_206_p2();
    void thread_tmp_fu_157_p1();
    void thread_v_1_fu_183_p2();
    void thread_x_1_fu_177_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
