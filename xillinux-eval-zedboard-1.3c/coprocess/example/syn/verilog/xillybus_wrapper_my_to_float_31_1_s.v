// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xillybus_wrapper_my_to_float_31_1_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        prescale,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv8_7F = 8'b1111111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] in_V;
input  [8:0] prescale;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
wire   [31:0] out_bits_0_V_fu_185_p5;
reg   [31:0] out_bits_0_V_reg_423;
wire   [31:0] p_Result_s_fu_209_p5;
reg   [31:0] p_Result_s_reg_428;
wire   [1:0] i_fu_227_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_48;
wire   [31:0] c_1_1_fu_251_p3;
wire   [0:0] exitcond_fu_221_p2;
wire   [31:0] c_1_2_fu_259_p3;
wire   [0:0] tmp_58_fu_267_p3;
reg   [0:0] tmp_58_reg_451;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_65;
wire   [1:0] i_1_fu_275_p2;
reg   [1:0] i_1_reg_455;
wire   [31:0] sh_assign_fu_285_p3;
reg   [31:0] sh_assign_reg_460;
wire   [0:0] isNeg_fu_293_p3;
reg   [0:0] isNeg_reg_466;
wire   [30:0] tmp_62_fu_331_p1;
reg   [30:0] tmp_62_reg_471;
wire   [30:0] tmp_63_fu_335_p1;
reg   [30:0] tmp_63_reg_476;
wire   [31:0] shift_2_fu_339_p2;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_86;
wire   [30:0] in_shift_V_fu_345_p3;
reg   [31:0] c_0_s_reg_78;
reg   [31:0] c_1_s_reg_90;
reg   [1:0] i1_reg_102;
reg   [30:0] in_shift_reg_113;
wire   [0:0] tmp_8_fu_351_p2;
reg   [31:0] shift_reg_123;
reg   [1:0] i2_reg_135;
reg   [30:0] p_Val2_in_phi_fu_149_p4;
reg   [30:0] p_Val2_in_reg_146;
reg   [31:0] shift_1_phi_fu_159_p4;
reg   [31:0] shift_1_reg_156;
wire   [15:0] p_Result_1_fu_167_p4;
wire   [16:0] tmp_fu_177_p3;
wire   [14:0] tmp_57_fu_197_p1;
wire   [15:0] tmp_2_fu_201_p3;
wire   [0:0] tmp_59_fu_233_p1;
wire   [31:0] out_bits_V_load_phi_fu_237_p3;
reg   [31:0] c_0_fu_243_p3;
wire   [0:0] tmp_60_fu_281_p1;
wire   [31:0] tmp_s_fu_301_p2;
wire  signed [31:0] tmp_5_fu_315_p1;
wire   [31:0] sh_assign_1_fu_307_p3;
wire   [31:0] tmp_6_fu_319_p2;
wire   [31:0] tmp_7_fu_325_p2;
wire   [7:0] tmp_65_fu_371_p1;
wire   [7:0] tmp_10_fu_374_p2;
wire   [7:0] tmp_66_fu_380_p1;
wire   [0:0] tmp_9_fu_366_p2;
wire   [7:0] phitmp_fu_384_p2;
wire   [7:0] out_exp_V_fu_390_p3;
wire   [22:0] p_Val2_s_fu_356_p4;
wire   [31:0] p_Result_31_fu_398_p4;
wire   [31:0] result_write_assign_fu_408_p1;
reg   [31:0] ap_return_preg = 32'b00000000000000000000000000000000;
reg   [3:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
        ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[26] <= 1'b0;
        ap_return_preg[27] <= 1'b0;
        ap_return_preg[28] <= 1'b0;
        ap_return_preg[29] <= 1'b0;
        ap_return_preg[30] <= 1'b0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((ap_const_lv1_0 == tmp_8_fu_351_p2) | ~(ap_const_lv1_0 == tmp_58_reg_451)))) begin
                        ap_return_preg[30 : 0] <= result_write_assign_fu_408_p1[30 : 0];
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_221_p2 == ap_const_lv1_0))) begin
        i1_reg_102 <= i_fu_227_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i1_reg_102 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_221_p2 == ap_const_lv1_0))) begin
        i2_reg_135 <= ap_const_lv2_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_58_reg_451) & ~(ap_const_lv1_0 == tmp_8_fu_351_p2))) begin
        i2_reg_135 <= i_1_reg_455;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_221_p2 == ap_const_lv1_0))) begin
        in_shift_reg_113 <= in_V;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_58_reg_451) & ~(ap_const_lv1_0 == tmp_8_fu_351_p2))) begin
        in_shift_reg_113 <= in_shift_V_fu_345_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_58_reg_451) & (ap_const_lv1_0 == tmp_8_fu_351_p2))) begin
        p_Val2_in_reg_146 <= in_shift_V_fu_345_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_58_fu_267_p3))) begin
        p_Val2_in_reg_146 <= in_shift_reg_113;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_58_reg_451) & (ap_const_lv1_0 == tmp_8_fu_351_p2))) begin
        shift_1_reg_156 <= shift_2_fu_339_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == tmp_58_fu_267_p3))) begin
        shift_1_reg_156 <= shift_reg_123;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_221_p2 == ap_const_lv1_0))) begin
        shift_reg_123 <= ap_const_lv32_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_58_reg_451) & ~(ap_const_lv1_0 == tmp_8_fu_351_p2))) begin
        shift_reg_123 <= shift_2_fu_339_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_221_p2 == ap_const_lv1_0))) begin
        c_0_s_reg_78 <= c_1_1_fu_251_p3;
        c_1_s_reg_90 <= c_1_2_fu_259_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_1_reg_455 <= i_1_fu_275_p2;
        tmp_58_reg_451 <= i2_reg_135[ap_const_lv32_1];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == tmp_58_fu_267_p3))) begin
        isNeg_reg_466 <= sh_assign_fu_285_p3[ap_const_lv32_1F];
        sh_assign_reg_460 <= sh_assign_fu_285_p3;
        tmp_62_reg_471 <= tmp_62_fu_331_p1;
        tmp_63_reg_476 <= tmp_63_fu_335_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        out_bits_0_V_reg_423 <= out_bits_0_V_fu_185_p5;
        p_Result_s_reg_428 <= p_Result_s_fu_209_p5;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or tmp_58_reg_451 or ap_sig_cseq_ST_st4_fsm_3 or tmp_8_fu_351_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((ap_const_lv1_0 == tmp_8_fu_351_p2) | ~(ap_const_lv1_0 == tmp_58_reg_451))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (tmp_58_reg_451 or ap_sig_cseq_ST_st4_fsm_3 or tmp_8_fu_351_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((ap_const_lv1_0 == tmp_8_fu_351_p2) | ~(ap_const_lv1_0 == tmp_58_reg_451)))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (tmp_58_reg_451 or ap_sig_cseq_ST_st4_fsm_3 or tmp_8_fu_351_p2 or result_write_assign_fu_408_p1 or ap_return_preg)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ((ap_const_lv1_0 == tmp_8_fu_351_p2) | ~(ap_const_lv1_0 == tmp_58_reg_451)))) begin
        ap_return = result_write_assign_fu_408_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_48)
begin
    if (ap_sig_bdd_48) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_65)
begin
    if (ap_sig_bdd_65) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_86)
begin
    if (ap_sig_bdd_86) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// p_Val2_in_phi_fu_149_p4 assign process. ///
always @ (tmp_58_reg_451 or ap_sig_cseq_ST_st4_fsm_3 or in_shift_V_fu_345_p3 or tmp_8_fu_351_p2 or p_Val2_in_reg_146)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_58_reg_451) & (ap_const_lv1_0 == tmp_8_fu_351_p2))) begin
        p_Val2_in_phi_fu_149_p4 = in_shift_V_fu_345_p3;
    end else begin
        p_Val2_in_phi_fu_149_p4 = p_Val2_in_reg_146;
    end
end

/// shift_1_phi_fu_159_p4 assign process. ///
always @ (tmp_58_reg_451 or shift_2_fu_339_p2 or ap_sig_cseq_ST_st4_fsm_3 or tmp_8_fu_351_p2 or shift_1_reg_156)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == tmp_58_reg_451) & (ap_const_lv1_0 == tmp_8_fu_351_p2))) begin
        shift_1_phi_fu_159_p4 = shift_2_fu_339_p2;
    end else begin
        shift_1_phi_fu_159_p4 = shift_1_reg_156;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_221_p2 or tmp_58_reg_451 or tmp_8_fu_351_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((exitcond_fu_221_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (((ap_const_lv1_0 == tmp_8_fu_351_p2) | ~(ap_const_lv1_0 == tmp_58_reg_451))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_48 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_48 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_65 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_65 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_86 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_86 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (out_bits_V_load_phi_fu_237_p3) begin
    if (out_bits_V_load_phi_fu_237_p3[31] == 1'b1) begin
        c_0_fu_243_p3 = 32'd0;
    end else if (out_bits_V_load_phi_fu_237_p3[30] == 1'b1) begin
        c_0_fu_243_p3 = 32'd1;
    end else if (out_bits_V_load_phi_fu_237_p3[29] == 1'b1) begin
        c_0_fu_243_p3 = 32'd2;
    end else if (out_bits_V_load_phi_fu_237_p3[28] == 1'b1) begin
        c_0_fu_243_p3 = 32'd3;
    end else if (out_bits_V_load_phi_fu_237_p3[27] == 1'b1) begin
        c_0_fu_243_p3 = 32'd4;
    end else if (out_bits_V_load_phi_fu_237_p3[26] == 1'b1) begin
        c_0_fu_243_p3 = 32'd5;
    end else if (out_bits_V_load_phi_fu_237_p3[25] == 1'b1) begin
        c_0_fu_243_p3 = 32'd6;
    end else if (out_bits_V_load_phi_fu_237_p3[24] == 1'b1) begin
        c_0_fu_243_p3 = 32'd7;
    end else if (out_bits_V_load_phi_fu_237_p3[23] == 1'b1) begin
        c_0_fu_243_p3 = 32'd8;
    end else if (out_bits_V_load_phi_fu_237_p3[22] == 1'b1) begin
        c_0_fu_243_p3 = 32'd9;
    end else if (out_bits_V_load_phi_fu_237_p3[21] == 1'b1) begin
        c_0_fu_243_p3 = 32'd10;
    end else if (out_bits_V_load_phi_fu_237_p3[20] == 1'b1) begin
        c_0_fu_243_p3 = 32'd11;
    end else if (out_bits_V_load_phi_fu_237_p3[19] == 1'b1) begin
        c_0_fu_243_p3 = 32'd12;
    end else if (out_bits_V_load_phi_fu_237_p3[18] == 1'b1) begin
        c_0_fu_243_p3 = 32'd13;
    end else if (out_bits_V_load_phi_fu_237_p3[17] == 1'b1) begin
        c_0_fu_243_p3 = 32'd14;
    end else if (out_bits_V_load_phi_fu_237_p3[16] == 1'b1) begin
        c_0_fu_243_p3 = 32'd15;
    end else if (out_bits_V_load_phi_fu_237_p3[15] == 1'b1) begin
        c_0_fu_243_p3 = 32'd16;
    end else if (out_bits_V_load_phi_fu_237_p3[14] == 1'b1) begin
        c_0_fu_243_p3 = 32'd17;
    end else if (out_bits_V_load_phi_fu_237_p3[13] == 1'b1) begin
        c_0_fu_243_p3 = 32'd18;
    end else if (out_bits_V_load_phi_fu_237_p3[12] == 1'b1) begin
        c_0_fu_243_p3 = 32'd19;
    end else if (out_bits_V_load_phi_fu_237_p3[11] == 1'b1) begin
        c_0_fu_243_p3 = 32'd20;
    end else if (out_bits_V_load_phi_fu_237_p3[10] == 1'b1) begin
        c_0_fu_243_p3 = 32'd21;
    end else if (out_bits_V_load_phi_fu_237_p3[9] == 1'b1) begin
        c_0_fu_243_p3 = 32'd22;
    end else if (out_bits_V_load_phi_fu_237_p3[8] == 1'b1) begin
        c_0_fu_243_p3 = 32'd23;
    end else if (out_bits_V_load_phi_fu_237_p3[7] == 1'b1) begin
        c_0_fu_243_p3 = 32'd24;
    end else if (out_bits_V_load_phi_fu_237_p3[6] == 1'b1) begin
        c_0_fu_243_p3 = 32'd25;
    end else if (out_bits_V_load_phi_fu_237_p3[5] == 1'b1) begin
        c_0_fu_243_p3 = 32'd26;
    end else if (out_bits_V_load_phi_fu_237_p3[4] == 1'b1) begin
        c_0_fu_243_p3 = 32'd27;
    end else if (out_bits_V_load_phi_fu_237_p3[3] == 1'b1) begin
        c_0_fu_243_p3 = 32'd28;
    end else if (out_bits_V_load_phi_fu_237_p3[2] == 1'b1) begin
        c_0_fu_243_p3 = 32'd29;
    end else if (out_bits_V_load_phi_fu_237_p3[1] == 1'b1) begin
        c_0_fu_243_p3 = 32'd30;
    end else if (out_bits_V_load_phi_fu_237_p3[0] == 1'b1) begin
        c_0_fu_243_p3 = 32'd31;
    end else begin
        c_0_fu_243_p3 = 32'd32;
    end
end


assign c_1_1_fu_251_p3 = ((tmp_59_fu_233_p1[0:0]===1'b1)? c_0_s_reg_78: c_0_fu_243_p3);
assign c_1_2_fu_259_p3 = ((tmp_59_fu_233_p1[0:0]===1'b1)? c_0_fu_243_p3: c_1_s_reg_90);
assign exitcond_fu_221_p2 = (i1_reg_102 == ap_const_lv2_2? 1'b1: 1'b0);
assign i_1_fu_275_p2 = (i2_reg_135 + ap_const_lv2_1);
assign i_fu_227_p2 = (i1_reg_102 + ap_const_lv2_1);
assign in_shift_V_fu_345_p3 = ((isNeg_reg_466[0:0]===1'b1)? tmp_62_reg_471: tmp_63_reg_476);
assign isNeg_fu_293_p3 = sh_assign_fu_285_p3[ap_const_lv32_1F];
assign out_bits_0_V_fu_185_p5 = {{tmp_fu_177_p3}, {ap_const_lv32_0[32'd14 : 32'd0]}};
assign out_bits_V_load_phi_fu_237_p3 = ((tmp_59_fu_233_p1[0:0]===1'b1)? p_Result_s_reg_428: out_bits_0_V_reg_423);
assign out_exp_V_fu_390_p3 = ((tmp_9_fu_366_p2[0:0]===1'b1)? ap_const_lv8_0: phitmp_fu_384_p2);
assign p_Result_1_fu_167_p4 = {{in_V[ap_const_lv32_1E : ap_const_lv32_F]}};
assign p_Result_31_fu_398_p4 = {{{{ap_const_lv1_0}, {out_exp_V_fu_390_p3}}}, {p_Val2_s_fu_356_p4}};
assign p_Result_s_fu_209_p5 = {{tmp_2_fu_201_p3}, {ap_const_lv32_0[32'd15 : 32'd0]}};
assign p_Val2_s_fu_356_p4 = {{p_Val2_in_phi_fu_149_p4[ap_const_lv32_1D : ap_const_lv32_7]}};
assign phitmp_fu_384_p2 = (tmp_10_fu_374_p2 - tmp_66_fu_380_p1);
assign result_write_assign_fu_408_p1 = p_Result_31_fu_398_p4;
assign sh_assign_1_fu_307_p3 = ((isNeg_fu_293_p3[0:0]===1'b1)? tmp_s_fu_301_p2: sh_assign_fu_285_p3);
assign sh_assign_fu_285_p3 = ((tmp_60_fu_281_p1[0:0]===1'b1)? c_1_s_reg_90: c_0_s_reg_78);
assign shift_2_fu_339_p2 = (shift_reg_123 + sh_assign_reg_460);
assign tmp_10_fu_374_p2 = (ap_const_lv8_7F - tmp_65_fu_371_p1);
assign tmp_2_fu_201_p3 = {{tmp_57_fu_197_p1}, {ap_const_lv1_1}};
assign tmp_57_fu_197_p1 = in_V[14:0];
assign tmp_58_fu_267_p3 = i2_reg_135[ap_const_lv32_1];
assign tmp_59_fu_233_p1 = i1_reg_102[0:0];
assign tmp_5_fu_315_p1 = $signed(in_shift_reg_113);
assign tmp_60_fu_281_p1 = i2_reg_135[0:0];
assign tmp_62_fu_331_p1 = tmp_6_fu_319_p2[30:0];
assign tmp_63_fu_335_p1 = tmp_7_fu_325_p2[30:0];
assign tmp_65_fu_371_p1 = prescale[7:0];
assign tmp_66_fu_380_p1 = shift_1_phi_fu_159_p4[7:0];
assign tmp_6_fu_319_p2 = $signed(tmp_5_fu_315_p1) >>> sh_assign_1_fu_307_p3;
assign tmp_7_fu_325_p2 = tmp_5_fu_315_p1 << sh_assign_1_fu_307_p3;
assign tmp_8_fu_351_p2 = (sh_assign_reg_460 == ap_const_lv32_10? 1'b1: 1'b0);
assign tmp_9_fu_366_p2 = (in_V == ap_const_lv31_0? 1'b1: 1'b0);
assign tmp_fu_177_p3 = {{p_Result_1_fu_167_p4}, {ap_const_lv1_1}};
assign tmp_s_fu_301_p2 = (ap_const_lv32_0 - sh_assign_fu_285_p3);
always @ (posedge ap_clk)
begin
    ap_return_preg[31] <= 1'b0;
end



endmodule //xillybus_wrapper_my_to_float_31_1_s

