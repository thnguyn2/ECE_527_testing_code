// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module xillybus_wrapper_big_mult_v3small_71_24_17_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        b_V,
        ap_return
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 14'b1;
parameter    ap_ST_st2_fsm_1 = 14'b10;
parameter    ap_ST_st3_fsm_2 = 14'b100;
parameter    ap_ST_st4_fsm_3 = 14'b1000;
parameter    ap_ST_st5_fsm_4 = 14'b10000;
parameter    ap_ST_st6_fsm_5 = 14'b100000;
parameter    ap_ST_st7_fsm_6 = 14'b1000000;
parameter    ap_ST_st8_fsm_7 = 14'b10000000;
parameter    ap_ST_st9_fsm_8 = 14'b100000000;
parameter    ap_ST_st10_fsm_9 = 14'b1000000000;
parameter    ap_ST_st11_fsm_10 = 14'b10000000000;
parameter    ap_ST_st12_fsm_11 = 14'b100000000000;
parameter    ap_ST_st13_fsm_12 = 14'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 14'b10000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv3_5 = 3'b101;
parameter    ap_const_lv3_4 = 3'b100;
parameter    ap_const_lv7_10 = 7'b10000;
parameter    ap_const_lv7_46 = 7'b1000110;
parameter    ap_const_lv32_46 = 32'b1000110;
parameter    ap_const_lv71_7FFFFFFFFFFFFFFFFF = 71'b11111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_28 = 32'b101000;
parameter    ap_const_lv7_5E = 7'b1011110;
parameter    ap_const_lv32_5E = 32'b1011110;
parameter    ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF = 95'b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_44 = 32'b1000100;
parameter    ap_const_lv95_0 = 95'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [70:0] a_V;
input  [23:0] b_V;
output  [94:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[94:0] ap_return;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm = 14'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_32;
wire   [40:0] tmp_fu_202_p1;
reg   [40:0] tmp_reg_593;
wire   [2:0] i_4_fu_212_p2;
reg   [2:0] i_4_reg_601;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_54;
wire   [6:0] Lo_assign_fu_224_p4;
reg   [6:0] Lo_assign_reg_606;
wire   [0:0] exitcond2_fu_206_p2;
wire   [6:0] Ui_fu_240_p3;
reg   [6:0] Ui_reg_615;
wire  signed [40:0] tmp_33_fu_328_p1;
reg  signed [40:0] tmp_33_reg_627;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_75;
wire   [63:0] tmp_6_fu_348_p1;
reg   [63:0] tmp_6_reg_635;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_84;
wire   [0:0] exitcond3_fu_342_p2;
wire   [2:0] i_3_fu_368_p2;
reg   [2:0] i_3_reg_650;
wire   [2:0] tmp_1_fu_401_p2;
reg   [2:0] tmp_1_reg_658;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_102;
wire   [0:0] exitcond_fu_395_p2;
wire   [16:0] tmp_37_fu_444_p1;
reg   [16:0] tmp_37_reg_673;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_120;
wire   [0:0] tmp_38_fu_448_p2;
reg   [0:0] tmp_38_reg_678;
wire   [6:0] tmp_41_fu_464_p3;
reg   [6:0] tmp_41_reg_683;
wire   [6:0] tmp_42_fu_472_p3;
reg   [6:0] tmp_42_reg_688;
wire   [6:0] tmp_43_fu_480_p3;
reg   [6:0] tmp_43_reg_693;
wire   [94:0] p_Result_29_fu_565_p2;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_137;
reg   [2:0] pp_V_address0;
reg    pp_V_ce0;
reg    pp_V_we0;
wire   [40:0] pp_V_d0;
wire   [40:0] pp_V_q0;
reg   [2:0] pps_V_address0;
reg    pps_V_ce0;
reg    pps_V_we0;
reg   [40:0] pps_V_d0;
wire   [40:0] pps_V_q0;
reg   [2:0] i_reg_154;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_165;
reg   [2:0] i_1_reg_166;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_176;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_183;
reg   [94:0] p_Val2_s_reg_177;
reg   [2:0] i_2_reg_189;
wire   [63:0] tmp_3_fu_337_p1;
wire   [63:0] tmp_8_fu_363_p1;
wire   [63:0] tmp_4_fu_407_p1;
wire  signed [40:0] grp_fu_332_p2;
wire   [40:0] tmp_9_fu_388_p2;
wire   [0:0] tmp_s_fu_218_p2;
wire   [6:0] tmp_2_fu_234_p2;
wire   [0:0] tmp_19_fu_248_p2;
wire   [6:0] tmp_21_fu_261_p2;
wire   [6:0] tmp_23_fu_270_p2;
reg   [70:0] tmp_20_fu_252_p4;
wire   [6:0] tmp_22_fu_265_p2;
wire   [6:0] tmp_24_fu_274_p3;
wire   [6:0] tmp_26_fu_289_p3;
wire   [6:0] tmp_27_fu_296_p2;
wire   [70:0] tmp_25_fu_282_p3;
wire   [70:0] tmp_28_fu_302_p1;
wire   [70:0] tmp_29_fu_306_p1;
wire   [70:0] tmp_30_fu_310_p2;
wire   [70:0] tmp_31_fu_316_p2;
wire   [70:0] p_Result_30_fu_322_p2;
wire  signed [40:0] grp_fu_332_p0;
wire   [23:0] grp_fu_332_p1;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_285;
wire   [1:0] tmp_34_fu_353_p1;
wire   [1:0] tmp_7_fu_357_p2;
wire   [23:0] r_V_fu_374_p4;
wire   [40:0] r_V_4_fu_384_p1;
wire   [1:0] tmp_36_fu_412_p1;
wire   [5:0] Li_fu_416_p4;
wire   [6:0] Li_cast1_fu_426_p1;
wire   [6:0] Ui_1_fu_434_p2;
wire   [31:0] Li_cast_fu_430_p1;
wire   [31:0] Ui_1_cast_fu_440_p1;
wire   [6:0] tmp_39_fu_454_p1;
wire   [6:0] tmp_40_fu_458_p2;
wire   [6:0] tmp_44_fu_491_p2;
wire   [94:0] loc_V_fu_488_p1;
wire   [94:0] tmp_45_fu_496_p1;
wire   [94:0] tmp_48_fu_506_p2;
reg   [94:0] tmp_49_fu_512_p4;
wire   [94:0] tmp_46_fu_499_p1;
wire   [94:0] tmp_47_fu_502_p1;
wire   [94:0] tmp_51_fu_529_p2;
wire   [94:0] tmp_52_fu_535_p2;
wire   [94:0] p_demorgan_fu_541_p2;
wire   [94:0] tmp_53_fu_547_p2;
wire   [94:0] tmp_50_fu_522_p3;
wire   [94:0] tmp_54_fu_553_p2;
wire   [94:0] tmp_55_fu_559_p2;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_398;
wire   [26:0] tmp_35_fu_571_p1;
wire    grp_fu_332_ce;
wire   [94:0] p_Result_s_fu_575_p5;
reg   [94:0] ap_return_preg = 95'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
reg   [13:0] ap_NS_fsm;


xillybus_wrapper_big_mult_v3small_71_24_17_s_pp_V #(
    .DataWidth( 41 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
pp_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( pp_V_address0 ),
    .ce0( pp_V_ce0 ),
    .we0( pp_V_we0 ),
    .d0( pp_V_d0 ),
    .q0( pp_V_q0 )
);

xillybus_wrapper_big_mult_v3small_71_24_17_s_pp_V #(
    .DataWidth( 41 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
pps_V_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( pps_V_address0 ),
    .ce0( pps_V_ce0 ),
    .we0( pps_V_we0 ),
    .d0( pps_V_d0 ),
    .q0( pps_V_q0 )
);

xillybus_wrapper_mul_41s_24ns_41_4 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 41 ),
    .din1_WIDTH( 24 ),
    .dout_WIDTH( 41 ))
xillybus_wrapper_mul_41s_24ns_41_4_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_332_p0 ),
    .din1( grp_fu_332_p1 ),
    .ce( grp_fu_332_ce ),
    .dout( grp_fu_332_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_return_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_return_preg
    if (ap_rst == 1'b1) begin
        ap_return_preg <= ap_const_lv95_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
            ap_return_preg <= p_Result_s_fu_575_p5;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        i_1_reg_166 <= i_3_reg_650;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        i_1_reg_166 <= ap_const_lv3_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & ~(ap_const_lv1_0 == exitcond3_fu_342_p2))) begin
        i_2_reg_189 <= ap_const_lv3_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        i_2_reg_189 <= tmp_1_reg_658;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_154 <= ap_const_lv3_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        i_reg_154 <= i_4_reg_601;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_206_p2 == ap_const_lv1_0))) begin
        Lo_assign_reg_606[2 : 0] <= Lo_assign_fu_224_p4[2 : 0];Lo_assign_reg_606[6 : 4] <= Lo_assign_fu_224_p4[6 : 4];
        Ui_reg_615 <= Ui_fu_240_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) & (ap_const_lv1_0 == exitcond3_fu_342_p2))) begin
        i_3_reg_650 <= i_3_fu_368_p2;
        tmp_6_reg_635[2 : 0] <= tmp_6_fu_348_p1[2 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_4_reg_601 <= i_4_fu_212_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12)) begin
        p_Val2_s_reg_177 <= p_Result_29_fu_565_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        tmp_1_reg_658 <= tmp_1_fu_401_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        tmp_33_reg_627 <= tmp_33_fu_328_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        tmp_37_reg_673 <= tmp_37_fu_444_p1;
        tmp_38_reg_678 <= tmp_38_fu_448_p2;
        tmp_41_reg_683 <= tmp_41_fu_464_p3;
        tmp_42_reg_688 <= tmp_42_fu_472_p3;
        tmp_43_reg_693 <= tmp_43_fu_480_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_reg_593[23 : 0] <= tmp_fu_202_p1[23 : 0];
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_return assign process. ///
always @ (ap_sig_cseq_ST_st14_fsm_13 or p_Result_s_fu_575_p5 or ap_return_preg)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        ap_return = p_Result_s_fu_575_p5;
    end else begin
        ap_return = ap_return_preg;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_183)
begin
    if (ap_sig_bdd_183) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_102)
begin
    if (ap_sig_bdd_102) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_120)
begin
    if (ap_sig_bdd_120) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_137)
begin
    if (ap_sig_bdd_137) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_398)
begin
    if (ap_sig_bdd_398) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_32)
begin
    if (ap_sig_bdd_32) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_54)
begin
    if (ap_sig_bdd_54) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_75)
begin
    if (ap_sig_bdd_75) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_285)
begin
    if (ap_sig_bdd_285) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_165)
begin
    if (ap_sig_bdd_165) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_176)
begin
    if (ap_sig_bdd_176) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_84)
begin
    if (ap_sig_bdd_84) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// pp_V_address0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or tmp_6_fu_348_p1 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st7_fsm_6 or tmp_3_fu_337_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        pp_V_address0 = tmp_3_fu_337_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        pp_V_address0 = tmp_6_fu_348_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        pp_V_address0 = ap_const_lv64_0;
    end else begin
        pp_V_address0 = 'bx;
    end
end

/// pp_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st7_fsm_6)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        pp_V_ce0 = ap_const_logic_1;
    end else begin
        pp_V_ce0 = ap_const_logic_0;
    end
end

/// pp_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st7_fsm_6)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        pp_V_we0 = ap_const_logic_1;
    end else begin
        pp_V_we0 = ap_const_logic_0;
    end
end

/// pps_V_address0 assign process. ///
always @ (tmp_6_reg_635 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st11_fsm_10 or exitcond_fu_395_p2 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st10_fsm_9 or tmp_8_fu_363_p1 or tmp_4_fu_407_p1)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        pps_V_address0 = tmp_6_reg_635;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        pps_V_address0 = ap_const_lv64_0;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) & ~(ap_const_lv1_0 == exitcond_fu_395_p2))) begin
        pps_V_address0 = ap_const_lv64_4;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) & (ap_const_lv1_0 == exitcond_fu_395_p2))) begin
        pps_V_address0 = tmp_4_fu_407_p1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        pps_V_address0 = tmp_8_fu_363_p1;
    end else begin
        pps_V_address0 = 'bx;
    end
end

/// pps_V_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st11_fsm_10 or exitcond_fu_395_p2 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st10_fsm_9)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) & (ap_const_lv1_0 == exitcond_fu_395_p2)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) & ~(ap_const_lv1_0 == exitcond_fu_395_p2)) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        pps_V_ce0 = ap_const_logic_1;
    end else begin
        pps_V_ce0 = ap_const_logic_0;
    end
end

/// pps_V_d0 assign process. ///
always @ (pp_V_q0 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st10_fsm_9 or tmp_9_fu_388_p2)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        pps_V_d0 = tmp_9_fu_388_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        pps_V_d0 = pp_V_q0;
    end else begin
        pps_V_d0 = 'bx;
    end
end

/// pps_V_we0 assign process. ///
always @ (ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st10_fsm_9)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        pps_V_we0 = ap_const_logic_1;
    end else begin
        pps_V_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_206_p2 or exitcond3_fu_342_p2 or exitcond_fu_395_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_fu_206_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            if (~(ap_const_lv1_0 == exitcond3_fu_342_p2)) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st11_fsm_10 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_395_p2)) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Li_cast1_fu_426_p1 = Li_fu_416_p4;
assign Li_cast_fu_430_p1 = Li_fu_416_p4;
assign Li_fu_416_p4 = {{{tmp_36_fu_412_p1}, {ap_const_lv1_0}}, {i_2_reg_189}};
assign Lo_assign_fu_224_p4 = {{{i_reg_154}, {ap_const_lv1_0}}, {i_reg_154}};
assign Ui_1_cast_fu_440_p1 = Ui_1_fu_434_p2;
assign Ui_1_fu_434_p2 = (ap_const_lv7_10 + Li_cast1_fu_426_p1);
assign Ui_fu_240_p3 = ((tmp_s_fu_218_p2[0:0]===1'b1)? ap_const_lv7_46: tmp_2_fu_234_p2);

/// ap_sig_bdd_102 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_102 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_120 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_120 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_137 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_137 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_165 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_165 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_176 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_176 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_183 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_183 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_285 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_285 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_32 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_32 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_398 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_398 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_54 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_54 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_75 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_75 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_84 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_84 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end
assign exitcond2_fu_206_p2 = (i_reg_154 == ap_const_lv3_5? 1'b1: 1'b0);
assign exitcond3_fu_342_p2 = (i_1_reg_166 == ap_const_lv3_5? 1'b1: 1'b0);
assign exitcond_fu_395_p2 = (i_2_reg_189 == ap_const_lv3_4? 1'b1: 1'b0);
assign grp_fu_332_ce = ap_const_logic_1;
assign grp_fu_332_p0 = tmp_33_reg_627;
assign grp_fu_332_p1 = tmp_reg_593;
assign i_3_fu_368_p2 = (ap_const_lv3_1 + i_1_reg_166);
assign i_4_fu_212_p2 = (i_reg_154 + ap_const_lv3_1);
assign loc_V_fu_488_p1 = tmp_37_reg_673;
assign p_Result_29_fu_565_p2 = (tmp_54_fu_553_p2 | tmp_55_fu_559_p2);
assign p_Result_30_fu_322_p2 = (tmp_30_fu_310_p2 & tmp_31_fu_316_p2);
assign p_Result_s_fu_575_p5 = {{tmp_35_fu_571_p1}, {p_Val2_s_reg_177[32'd67 : 32'd0]}};
assign p_demorgan_fu_541_p2 = (tmp_51_fu_529_p2 & tmp_52_fu_535_p2);
assign pp_V_d0 = grp_fu_332_p2;
assign r_V_4_fu_384_p1 = r_V_fu_374_p4;
assign r_V_fu_374_p4 = {{pps_V_q0[ap_const_lv32_28 : ap_const_lv32_11]}};
assign tmp_19_fu_248_p2 = (Lo_assign_reg_606 > Ui_reg_615? 1'b1: 1'b0);
assign tmp_1_fu_401_p2 = (i_2_reg_189 + ap_const_lv3_1);

integer ap_tvar_int_0;

always @ (a_V) begin
    for (ap_tvar_int_0 = 71 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_46 - ap_const_lv32_0) begin
            tmp_20_fu_252_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_20_fu_252_p4[ap_tvar_int_0] = a_V[ap_const_lv32_46 - ap_tvar_int_0];
        end
    end
end


assign tmp_21_fu_261_p2 = (Lo_assign_reg_606 - Ui_reg_615);
assign tmp_22_fu_265_p2 = ($signed(ap_const_lv7_46) - $signed(Lo_assign_reg_606));
assign tmp_23_fu_270_p2 = (Ui_reg_615 - Lo_assign_reg_606);
assign tmp_24_fu_274_p3 = ((tmp_19_fu_248_p2[0:0]===1'b1)? tmp_21_fu_261_p2: tmp_23_fu_270_p2);
assign tmp_25_fu_282_p3 = ((tmp_19_fu_248_p2[0:0]===1'b1)? tmp_20_fu_252_p4: a_V);
assign tmp_26_fu_289_p3 = ((tmp_19_fu_248_p2[0:0]===1'b1)? tmp_22_fu_265_p2: Lo_assign_reg_606);
assign tmp_27_fu_296_p2 = ($signed(ap_const_lv7_46) - $signed(tmp_24_fu_274_p3));
assign tmp_28_fu_302_p1 = tmp_26_fu_289_p3;
assign tmp_29_fu_306_p1 = tmp_27_fu_296_p2;
assign tmp_2_fu_234_p2 = (ap_const_lv7_10 + Lo_assign_fu_224_p4);
assign tmp_30_fu_310_p2 = tmp_25_fu_282_p3 >> tmp_28_fu_302_p1;
assign tmp_31_fu_316_p2 = ap_const_lv71_7FFFFFFFFFFFFFFFFF >> tmp_29_fu_306_p1;
assign tmp_33_fu_328_p1 = p_Result_30_fu_322_p2[40:0];
assign tmp_34_fu_353_p1 = i_1_reg_166[1:0];
assign tmp_35_fu_571_p1 = pps_V_q0[26:0];
assign tmp_36_fu_412_p1 = i_2_reg_189[1:0];
assign tmp_37_fu_444_p1 = pps_V_q0[16:0];
assign tmp_38_fu_448_p2 = (Li_cast_fu_430_p1 > Ui_1_cast_fu_440_p1? 1'b1: 1'b0);
assign tmp_39_fu_454_p1 = Li_fu_416_p4;
assign tmp_3_fu_337_p1 = i_reg_154;
assign tmp_40_fu_458_p2 = ($signed(ap_const_lv7_5E) - $signed(tmp_39_fu_454_p1));
assign tmp_41_fu_464_p3 = ((tmp_38_fu_448_p2[0:0]===1'b1)? tmp_39_fu_454_p1: Ui_1_fu_434_p2);
assign tmp_42_fu_472_p3 = ((tmp_38_fu_448_p2[0:0]===1'b1)? Ui_1_fu_434_p2: tmp_39_fu_454_p1);
assign tmp_43_fu_480_p3 = ((tmp_38_fu_448_p2[0:0]===1'b1)? tmp_40_fu_458_p2: tmp_39_fu_454_p1);
assign tmp_44_fu_491_p2 = ($signed(ap_const_lv7_5E) - $signed(tmp_41_reg_683));
assign tmp_45_fu_496_p1 = tmp_43_reg_693;
assign tmp_46_fu_499_p1 = tmp_42_reg_688;
assign tmp_47_fu_502_p1 = tmp_44_fu_491_p2;
assign tmp_48_fu_506_p2 = loc_V_fu_488_p1 << tmp_45_fu_496_p1;

integer ap_tvar_int_1;

always @ (tmp_48_fu_506_p2) begin
    for (ap_tvar_int_1 = 95 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > ap_const_lv32_5E - ap_const_lv32_0) begin
            tmp_49_fu_512_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_49_fu_512_p4[ap_tvar_int_1] = tmp_48_fu_506_p2[ap_const_lv32_5E - ap_tvar_int_1];
        end
    end
end


assign tmp_4_fu_407_p1 = i_2_reg_189;
assign tmp_50_fu_522_p3 = ((tmp_38_reg_678[0:0]===1'b1)? tmp_49_fu_512_p4: tmp_48_fu_506_p2);
assign tmp_51_fu_529_p2 = ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF << tmp_46_fu_499_p1;
assign tmp_52_fu_535_p2 = ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF >> tmp_47_fu_502_p1;
assign tmp_53_fu_547_p2 = (p_demorgan_fu_541_p2 ^ ap_const_lv95_7FFFFFFFFFFFFFFFFFFFFFFF);
assign tmp_54_fu_553_p2 = (p_Val2_s_reg_177 & tmp_53_fu_547_p2);
assign tmp_55_fu_559_p2 = (tmp_50_fu_522_p3 & p_demorgan_fu_541_p2);
assign tmp_6_fu_348_p1 = i_1_reg_166;
assign tmp_7_fu_357_p2 = ($signed(ap_const_lv2_3) + $signed(tmp_34_fu_353_p1));
assign tmp_8_fu_363_p1 = tmp_7_fu_357_p2;
assign tmp_9_fu_388_p2 = (r_V_4_fu_384_p1 + pp_V_q0);
assign tmp_fu_202_p1 = b_V;
assign tmp_s_fu_218_p2 = (i_reg_154 == ap_const_lv3_4? 1'b1: 1'b0);
always @ (posedge ap_clk)
begin
    tmp_reg_593[40:24] <= 17'b00000000000000000;
    Lo_assign_reg_606[3] <= 1'b0;
    tmp_6_reg_635[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end



endmodule //xillybus_wrapper_big_mult_v3small_71_24_17_s

