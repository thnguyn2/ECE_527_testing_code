-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.570000,HLS_SYN_LAT=82,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=37,HLS_SYN_LUT=77}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_21 : BOOLEAN;
    signal exitcond_flatten_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_55 : BOOLEAN;
    signal indvar_flatten_next_fu_144_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_reg_319 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_156_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_reg_324 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_mid2_fu_170_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_mid2_reg_329 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_trn6_cast_fu_182_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_trn6_cast_reg_334 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr7_cast_fu_204_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr7_cast_reg_339 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_addr_reg_344 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_1_fu_229_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_1_reg_352 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_79 : BOOLEAN;
    signal exitcond_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_301_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_95 : BOOLEAN;
    signal indvar_flatten_reg_93 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_104 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_115 : STD_LOGIC_VECTOR (1 downto 0);
    signal k_reg_126 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_115 : BOOLEAN;
    signal tmp_1_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_306_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond1_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_164_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_186_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_194_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_trn5_cast_fu_178_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_addr7_fu_198_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_addr8_fu_208_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr8_cast_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_trn_cast1_fu_235_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr1_fu_243_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr1_cast_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_257_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl9_cast_fu_265_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_trn_cast_fu_239_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_addr3_fu_269_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_addr3_cast_fu_275_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr4_fu_279_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr4_cast_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_306_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component matrixmul_mac_muladd_8s_8s_16ns_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrixmul_mac_muladd_8s_8s_16ns_16_1_U1 : component matrixmul_mac_muladd_8s_8s_16ns_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_306_p0,
        din1 => grp_fu_306_p1,
        din2 => grp_fu_306_p2,
        dout => grp_fu_306_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_reg_104 assign process. --
    i_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                i_reg_104 <= i_mid2_reg_329;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_104 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_93 assign process. --
    indvar_flatten_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                indvar_flatten_reg_93 <= indvar_flatten_next_reg_319;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_93 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_115 assign process. --
    j_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
                j_reg_115 <= j_1_fu_301_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_115 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- k_reg_126 assign process. --
    k_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                k_reg_126 <= k_1_reg_352;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_flatten_fu_138_p2 = ap_const_lv1_0))) then 
                k_reg_126 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_flatten_fu_138_p2 = ap_const_lv1_0))) then
                i_mid2_reg_329 <= i_mid2_fu_170_p3;
                j_mid2_reg_324 <= j_mid2_fu_156_p3;
                p_addr7_cast_reg_339 <= p_addr7_cast_fu_204_p1;
                res_addr_reg_344 <= tmp_1_fu_218_p1(4 - 1 downto 0);
                    tmp_2_trn6_cast_reg_334(1 downto 0) <= tmp_2_trn6_cast_fu_182_p1(1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                indvar_flatten_next_reg_319 <= indvar_flatten_next_fu_144_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                k_1_reg_352 <= k_1_fu_229_p2;
            end if;
        end if;
    end process;
    tmp_2_trn6_cast_reg_334(5 downto 2) <= "0000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_138_p2, exitcond_fu_223_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_flatten_fu_138_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((ap_const_lv1_0 = exitcond_fu_223_p2)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_address0 <= tmp_2_fu_252_p1(4 - 1 downto 0);

    -- a_ce0 assign process. --
    a_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(exitcond_flatten_fu_138_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_flatten_fu_138_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(exitcond_flatten_fu_138_p2, ap_sig_cseq_ST_st2_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_flatten_fu_138_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_115 assign process. --
    ap_sig_bdd_115_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_115 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_21 assign process. --
    ap_sig_bdd_21_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_21 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_55 assign process. --
    ap_sig_bdd_55_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_55 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_79 assign process. --
    ap_sig_bdd_79_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_79 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_95 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_21)
    begin
        if (ap_sig_bdd_21) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_55)
    begin
        if (ap_sig_bdd_55) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_79)
    begin
        if (ap_sig_bdd_79) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_115)
    begin
        if (ap_sig_bdd_115) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_95)
    begin
        if (ap_sig_bdd_95) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= tmp_s_fu_288_p1(4 - 1 downto 0);

    -- b_ce0 assign process. --
    b_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_150_p2 <= "1" when (j_reg_115 = ap_const_lv2_3) else "0";
    exitcond_flatten_fu_138_p2 <= "1" when (indvar_flatten_reg_93 = ap_const_lv4_9) else "0";
    exitcond_fu_223_p2 <= "1" when (k_reg_126 = ap_const_lv2_3) else "0";
    grp_fu_306_p0 <= b_q0;
    grp_fu_306_p1 <= a_q0;
    grp_fu_306_p2 <= res_q0;
    i_mid2_fu_170_p3 <= 
        i_s_fu_164_p2 when (exitcond1_fu_150_p2(0) = '1') else 
        i_reg_104;
    i_s_fu_164_p2 <= std_logic_vector(unsigned(i_reg_104) + unsigned(ap_const_lv2_1));
    indvar_flatten_next_fu_144_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_93) + unsigned(ap_const_lv4_1));
    j_1_fu_301_p2 <= std_logic_vector(unsigned(j_mid2_reg_324) + unsigned(ap_const_lv2_1));
    j_mid2_fu_156_p3 <= 
        ap_const_lv2_0 when (exitcond1_fu_150_p2(0) = '1') else 
        j_reg_115;
    k_1_fu_229_p2 <= std_logic_vector(unsigned(k_reg_126) + unsigned(ap_const_lv2_1));
        p_addr1_cast_fu_248_p1 <= std_logic_vector(resize(signed(p_addr1_fu_243_p2),32));

    p_addr1_fu_243_p2 <= std_logic_vector(signed(p_addr7_cast_reg_339) + signed(tmp_4_trn_cast1_fu_235_p1));
        p_addr3_cast_fu_275_p1 <= std_logic_vector(resize(signed(p_addr3_fu_269_p2),6));

    p_addr3_fu_269_p2 <= std_logic_vector(unsigned(p_shl9_cast_fu_265_p1) - unsigned(tmp_4_trn_cast_fu_239_p1));
        p_addr4_cast_fu_284_p1 <= std_logic_vector(resize(signed(p_addr4_fu_279_p2),32));

    p_addr4_fu_279_p2 <= std_logic_vector(signed(p_addr3_cast_fu_275_p1) + signed(tmp_2_trn6_cast_reg_334));
        p_addr7_cast_fu_204_p1 <= std_logic_vector(resize(signed(p_addr7_fu_198_p2),6));

    p_addr7_fu_198_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_194_p1) - unsigned(tmp_trn5_cast_fu_178_p1));
        p_addr8_cast_fu_214_p1 <= std_logic_vector(resize(signed(p_addr8_fu_208_p2),32));

    p_addr8_fu_208_p2 <= std_logic_vector(signed(p_addr7_cast_fu_204_p1) + signed(tmp_2_trn6_cast_fu_182_p1));
    p_shl9_cast_fu_265_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_257_p3),5));
    p_shl_cast_fu_194_p1 <= std_logic_vector(resize(unsigned(tmp_fu_186_p3),5));

    -- res_address0 assign process. --
    res_address0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, res_addr_reg_344, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, tmp_1_fu_218_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            res_address0 <= tmp_1_fu_218_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            res_address0 <= res_addr_reg_344;
        else 
            res_address0 <= "XXXX";
        end if; 
    end process;


    -- res_ce0 assign process. --
    res_ce0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- res_d0 assign process. --
    res_d0_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, grp_fu_306_p3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            res_d0 <= grp_fu_306_p3;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            res_d0 <= ap_const_lv16_0;
        else 
            res_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- res_we0 assign process. --
    res_we0_assign_proc : process(exitcond_flatten_fu_138_p2, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_flatten_fu_138_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_218_p1 <= std_logic_vector(resize(unsigned(p_addr8_cast_fu_214_p1),64));
    tmp_2_fu_252_p1 <= std_logic_vector(resize(unsigned(p_addr1_cast_fu_248_p1),64));
    tmp_2_trn6_cast_fu_182_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_156_p3),6));
    tmp_4_fu_257_p3 <= (k_reg_126 & ap_const_lv2_0);
    tmp_4_trn_cast1_fu_235_p1 <= std_logic_vector(resize(unsigned(k_reg_126),6));
    tmp_4_trn_cast_fu_239_p1 <= std_logic_vector(resize(unsigned(k_reg_126),5));
    tmp_fu_186_p3 <= (i_mid2_fu_170_p3 & ap_const_lv2_0);
    tmp_s_fu_288_p1 <= std_logic_vector(resize(unsigned(p_addr4_cast_fu_284_p1),64));
    tmp_trn5_cast_fu_178_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_170_p3),5));
end behav;
