// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _matrixmul_HH_
#define _matrixmul_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrixmul_mac_muladd_8s_8s_16ns_16_1.h"

namespace ap_rtl {

struct matrixmul : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<8> > a_q0;
    sc_out< sc_lv<4> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<8> > b_q0;
    sc_out< sc_lv<4> > res_address0;
    sc_out< sc_logic > res_ce0;
    sc_out< sc_logic > res_we0;
    sc_out< sc_lv<16> > res_d0;


    // Module declarations
    matrixmul(sc_module_name name);
    SC_HAS_PROCESS(matrixmul);

    ~matrixmul();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrixmul_mac_muladd_8s_8s_16ns_16_1<1,1,8,8,16,16>* matrixmul_mac_muladd_8s_8s_16ns_16_1_U1;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_21;
    sc_signal< sc_lv<2> > i_1_fu_128_p2;
    sc_signal< sc_lv<2> > i_1_reg_279;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_54;
    sc_signal< sc_lv<6> > p_addr7_cast_fu_156_p1;
    sc_signal< sc_lv<6> > p_addr7_cast_reg_284;
    sc_signal< sc_lv<1> > exitcond2_fu_122_p2;
    sc_signal< sc_lv<2> > j_1_fu_166_p2;
    sc_signal< sc_lv<2> > j_1_reg_293;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_69;
    sc_signal< sc_lv<6> > tmp_2_trn6_cast_fu_172_p1;
    sc_signal< sc_lv<6> > tmp_2_trn6_cast_reg_298;
    sc_signal< sc_lv<1> > exitcond1_fu_160_p2;
    sc_signal< sc_lv<4> > res_addr_reg_303;
    sc_signal< sc_lv<2> > k_1_fu_196_p2;
    sc_signal< sc_lv<2> > k_1_reg_311;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_85;
    sc_signal< sc_lv<1> > exitcond_fu_190_p2;
    sc_signal< sc_lv<16> > grp_fu_268_p3;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_101;
    sc_signal< sc_lv<2> > i_reg_75;
    sc_signal< sc_lv<2> > j_reg_86;
    sc_signal< sc_lv<16> > res_load_reg_97;
    sc_signal< sc_lv<2> > k_reg_110;
    sc_signal< sc_lv<64> > tmp_2_fu_185_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_219_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_255_p1;
    sc_signal< sc_lv<4> > tmp_fu_138_p3;
    sc_signal< sc_lv<5> > p_shl_cast_fu_146_p1;
    sc_signal< sc_lv<5> > tmp_trn5_cast_fu_134_p1;
    sc_signal< sc_lv<5> > p_addr7_fu_150_p2;
    sc_signal< sc_lv<6> > p_addr8_fu_176_p2;
    sc_signal< sc_lv<32> > p_addr8_cast_fu_181_p1;
    sc_signal< sc_lv<6> > tmp_4_trn_cast1_fu_202_p1;
    sc_signal< sc_lv<6> > p_addr1_fu_210_p2;
    sc_signal< sc_lv<32> > p_addr1_cast_fu_215_p1;
    sc_signal< sc_lv<4> > tmp_9_fu_224_p3;
    sc_signal< sc_lv<5> > p_shl9_cast_fu_232_p1;
    sc_signal< sc_lv<5> > tmp_4_trn_cast_fu_206_p1;
    sc_signal< sc_lv<5> > p_addr3_fu_236_p2;
    sc_signal< sc_lv<6> > p_addr3_cast_fu_242_p1;
    sc_signal< sc_lv<6> > p_addr4_fu_246_p2;
    sc_signal< sc_lv<32> > p_addr4_cast_fu_251_p1;
    sc_signal< sc_lv<8> > grp_fu_268_p0;
    sc_signal< sc_lv<8> > grp_fu_268_p1;
    sc_signal< sc_lv<16> > grp_fu_268_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_st1_fsm_0;
    static const sc_lv<5> ap_ST_st2_fsm_1;
    static const sc_lv<5> ap_ST_st3_fsm_2;
    static const sc_lv<5> ap_ST_st4_fsm_3;
    static const sc_lv<5> ap_ST_st5_fsm_4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_101();
    void thread_ap_sig_bdd_21();
    void thread_ap_sig_bdd_54();
    void thread_ap_sig_bdd_69();
    void thread_ap_sig_bdd_85();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_exitcond1_fu_160_p2();
    void thread_exitcond2_fu_122_p2();
    void thread_exitcond_fu_190_p2();
    void thread_grp_fu_268_p0();
    void thread_grp_fu_268_p1();
    void thread_grp_fu_268_p2();
    void thread_i_1_fu_128_p2();
    void thread_j_1_fu_166_p2();
    void thread_k_1_fu_196_p2();
    void thread_p_addr1_cast_fu_215_p1();
    void thread_p_addr1_fu_210_p2();
    void thread_p_addr3_cast_fu_242_p1();
    void thread_p_addr3_fu_236_p2();
    void thread_p_addr4_cast_fu_251_p1();
    void thread_p_addr4_fu_246_p2();
    void thread_p_addr7_cast_fu_156_p1();
    void thread_p_addr7_fu_150_p2();
    void thread_p_addr8_cast_fu_181_p1();
    void thread_p_addr8_fu_176_p2();
    void thread_p_shl9_cast_fu_232_p1();
    void thread_p_shl_cast_fu_146_p1();
    void thread_res_address0();
    void thread_res_ce0();
    void thread_res_d0();
    void thread_res_we0();
    void thread_tmp_2_fu_185_p1();
    void thread_tmp_2_trn6_cast_fu_172_p1();
    void thread_tmp_4_fu_219_p1();
    void thread_tmp_4_trn_cast1_fu_202_p1();
    void thread_tmp_4_trn_cast_fu_206_p1();
    void thread_tmp_9_fu_224_p3();
    void thread_tmp_fu_138_p3();
    void thread_tmp_s_fu_255_p1();
    void thread_tmp_trn5_cast_fu_134_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
