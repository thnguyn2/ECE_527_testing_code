// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333333,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.180000,HLS_SYN_LAT=79,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=45,HLS_SYN_LUT=60}" *)

module matrixmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        res_address0,
        res_ce0,
        res_we0,
        res_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv16_0 = 16'b0000000000000000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [3:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [3:0] res_address0;
output   res_ce0;
output   res_we0;
output  [15:0] res_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg res_ce0;
reg res_we0;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm = 5'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_21;
wire   [1:0] i_1_fu_128_p2;
reg   [1:0] i_1_reg_279;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_54;
wire  signed [5:0] p_addr7_cast_fu_156_p1;
reg  signed [5:0] p_addr7_cast_reg_284;
wire   [0:0] exitcond2_fu_122_p2;
wire   [1:0] j_1_fu_166_p2;
reg   [1:0] j_1_reg_293;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_69;
wire   [5:0] tmp_2_trn6_cast_fu_172_p1;
reg   [5:0] tmp_2_trn6_cast_reg_298;
wire   [0:0] exitcond1_fu_160_p2;
reg   [3:0] res_addr_reg_303;
wire   [1:0] k_1_fu_196_p2;
reg   [1:0] k_1_reg_311;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_85;
wire   [0:0] exitcond_fu_190_p2;
wire  signed [15:0] grp_fu_268_p3;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_101;
reg   [1:0] i_reg_75;
reg   [1:0] j_reg_86;
reg   [15:0] res_load_reg_97;
reg   [1:0] k_reg_110;
wire   [63:0] tmp_2_fu_185_p1;
wire   [63:0] tmp_4_fu_219_p1;
wire   [63:0] tmp_s_fu_255_p1;
wire   [3:0] tmp_fu_138_p3;
wire   [4:0] p_shl_cast_fu_146_p1;
wire   [4:0] tmp_trn5_cast_fu_134_p1;
wire   [4:0] p_addr7_fu_150_p2;
wire  signed [5:0] p_addr8_fu_176_p2;
wire  signed [31:0] p_addr8_cast_fu_181_p1;
wire   [5:0] tmp_4_trn_cast1_fu_202_p1;
wire  signed [5:0] p_addr1_fu_210_p2;
wire  signed [31:0] p_addr1_cast_fu_215_p1;
wire   [3:0] tmp_9_fu_224_p3;
wire   [4:0] p_shl9_cast_fu_232_p1;
wire   [4:0] tmp_4_trn_cast_fu_206_p1;
wire   [4:0] p_addr3_fu_236_p2;
wire  signed [5:0] p_addr3_cast_fu_242_p1;
wire  signed [5:0] p_addr4_fu_246_p2;
wire  signed [31:0] p_addr4_cast_fu_251_p1;
wire  signed [7:0] grp_fu_268_p0;
wire  signed [7:0] grp_fu_268_p1;
wire   [15:0] grp_fu_268_p2;
reg   [4:0] ap_NS_fsm;


matrixmul_mac_muladd_8s_8s_16ns_16_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrixmul_mac_muladd_8s_8s_16ns_16_1_U1(
    .din0( grp_fu_268_p0 ),
    .din1( grp_fu_268_p1 ),
    .din2( grp_fu_268_p2 ),
    .dout( grp_fu_268_p3 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & ~(ap_const_lv1_0 == exitcond1_fu_160_p2))) begin
        i_reg_75 <= i_1_reg_279;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_75 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_190_p2))) begin
        j_reg_86 <= j_1_reg_293;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_122_p2 == ap_const_lv1_0))) begin
        j_reg_86 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        k_reg_110 <= k_1_reg_311;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_160_p2))) begin
        k_reg_110 <= ap_const_lv2_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        res_load_reg_97 <= grp_fu_268_p3;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_160_p2))) begin
        res_load_reg_97 <= ap_const_lv16_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        i_1_reg_279 <= i_1_fu_128_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        j_1_reg_293 <= j_1_fu_166_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        k_1_reg_311 <= k_1_fu_196_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond2_fu_122_p2 == ap_const_lv1_0))) begin
        p_addr7_cast_reg_284 <= p_addr7_cast_fu_156_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) & (ap_const_lv1_0 == exitcond1_fu_160_p2))) begin
        res_addr_reg_303 <= tmp_2_fu_185_p1;
        tmp_2_trn6_cast_reg_298[1 : 0] <= tmp_2_trn6_cast_fu_172_p1[1 : 0];
    end
end

/// a_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        a_ce0 = ap_const_logic_1;
    end else begin
        a_ce0 = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_122_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_122_p2 == ap_const_lv1_0))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond2_fu_122_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond2_fu_122_p2 == ap_const_lv1_0))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_21)
begin
    if (ap_sig_bdd_21) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_54)
begin
    if (ap_sig_bdd_54) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_69)
begin
    if (ap_sig_bdd_69) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_85)
begin
    if (ap_sig_bdd_85) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_101)
begin
    if (ap_sig_bdd_101) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// b_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        b_ce0 = ap_const_logic_1;
    end else begin
        b_ce0 = ap_const_logic_0;
    end
end

/// res_ce0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        res_ce0 = ap_const_logic_1;
    end else begin
        res_ce0 = ap_const_logic_0;
    end
end

/// res_we0 assign process. ///
always @ (ap_sig_cseq_ST_st4_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        res_we0 = ap_const_logic_1;
    end else begin
        res_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond2_fu_122_p2 or exitcond1_fu_160_p2 or exitcond_fu_190_p2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond2_fu_122_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_160_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_190_p2)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = tmp_4_fu_219_p1;

/// ap_sig_bdd_101 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_101 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_21 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_21 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_54 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_54 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_69 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_69 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_85 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_85 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end
assign b_address0 = tmp_s_fu_255_p1;
assign exitcond1_fu_160_p2 = (j_reg_86 == ap_const_lv2_3? 1'b1: 1'b0);
assign exitcond2_fu_122_p2 = (i_reg_75 == ap_const_lv2_3? 1'b1: 1'b0);
assign exitcond_fu_190_p2 = (k_reg_110 == ap_const_lv2_3? 1'b1: 1'b0);
assign grp_fu_268_p0 = b_q0;
assign grp_fu_268_p1 = a_q0;
assign grp_fu_268_p2 = res_load_reg_97;
assign i_1_fu_128_p2 = (i_reg_75 + ap_const_lv2_1);
assign j_1_fu_166_p2 = (j_reg_86 + ap_const_lv2_1);
assign k_1_fu_196_p2 = (k_reg_110 + ap_const_lv2_1);
assign p_addr1_cast_fu_215_p1 = p_addr1_fu_210_p2;
assign p_addr1_fu_210_p2 = ($signed(p_addr7_cast_reg_284) + $signed(tmp_4_trn_cast1_fu_202_p1));
assign p_addr3_cast_fu_242_p1 = $signed(p_addr3_fu_236_p2);
assign p_addr3_fu_236_p2 = (p_shl9_cast_fu_232_p1 - tmp_4_trn_cast_fu_206_p1);
assign p_addr4_cast_fu_251_p1 = p_addr4_fu_246_p2;
assign p_addr4_fu_246_p2 = ($signed(p_addr3_cast_fu_242_p1) + $signed(tmp_2_trn6_cast_reg_298));
assign p_addr7_cast_fu_156_p1 = $signed(p_addr7_fu_150_p2);
assign p_addr7_fu_150_p2 = (p_shl_cast_fu_146_p1 - tmp_trn5_cast_fu_134_p1);
assign p_addr8_cast_fu_181_p1 = p_addr8_fu_176_p2;
assign p_addr8_fu_176_p2 = ($signed(tmp_2_trn6_cast_fu_172_p1) + $signed(p_addr7_cast_reg_284));
assign p_shl9_cast_fu_232_p1 = tmp_9_fu_224_p3;
assign p_shl_cast_fu_146_p1 = tmp_fu_138_p3;
assign res_address0 = res_addr_reg_303;
assign res_d0 = res_load_reg_97;
assign tmp_2_fu_185_p1 = $unsigned(p_addr8_cast_fu_181_p1);
assign tmp_2_trn6_cast_fu_172_p1 = j_reg_86;
assign tmp_4_fu_219_p1 = $unsigned(p_addr1_cast_fu_215_p1);
assign tmp_4_trn_cast1_fu_202_p1 = k_reg_110;
assign tmp_4_trn_cast_fu_206_p1 = k_reg_110;
assign tmp_9_fu_224_p3 = {{k_reg_110}, {ap_const_lv2_0}};
assign tmp_fu_138_p3 = {{i_reg_75}, {ap_const_lv2_0}};
assign tmp_s_fu_255_p1 = $unsigned(p_addr4_cast_fu_251_p1);
assign tmp_trn5_cast_fu_134_p1 = i_reg_75;
always @ (posedge ap_clk)
begin
    tmp_2_trn6_cast_reg_298[5:2] <= 4'b0000;
end



endmodule //matrixmul

