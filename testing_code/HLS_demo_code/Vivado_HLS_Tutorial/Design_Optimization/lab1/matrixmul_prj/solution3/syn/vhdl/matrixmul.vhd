-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    res_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_ce0 : OUT STD_LOGIC;
    res_we0 : OUT STD_LOGIC;
    res_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=11.130000,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=53,HLS_SYN_LUT=70}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st5_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal indvar_flatten_reg_132 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_143 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_154 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_371 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_65 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal indvar_flatten_next_fu_172_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_next_reg_375 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_mid2_fu_184_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_mid2_reg_380 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_mid2_fu_198_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_mid2_reg_387 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_addr_cast1_fu_232_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr_cast1_reg_392 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr2_fu_282_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr2_reg_418 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_99 : BOOLEAN;
    signal grp_fu_363_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_433 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_1_fu_334_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_438 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_phi_fu_136_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_phi_fu_147_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_phi_fu_158_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_240_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_355_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal exitcond_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_192_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_214_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_222_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_trn_cast_fu_206_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_addr_fu_226_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_addr_cast_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr1_fu_250_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr1_cast_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_trn_cast1_fu_210_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_addr9_fu_265_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_trn_cast_fu_279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr4_fu_295_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_addr4_cast_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_trn_cast2_fu_276_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_addr3_fu_309_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_2_fu_328_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_2_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_addr2_cast_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_355_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_278 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component matrixmul_mac_muladd_8s_8s_16s_16_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrixmul_mac_muladd_8s_8s_16s_16_1_U1 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_355_p0,
        din1 => grp_fu_355_p1,
        din2 => grp_fu_355_p2,
        dout => grp_fu_355_p3);

    matrixmul_mac_muladd_8s_8s_16s_16_1_U2 : component matrixmul_mac_muladd_8s_8s_16s_16_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_363_p0,
        din1 => grp_fu_363_p1,
        din2 => grp_fu_363_p2,
        dout => grp_fu_363_p3);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((exitcond_flatten_fu_166_p2 = ap_const_lv1_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_371 = ap_const_lv1_0))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not((exitcond_flatten_reg_371 = ap_const_lv1_0))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_143 assign process. --
    i_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_371 = ap_const_lv1_0))) then 
                i_reg_143 <= i_mid2_reg_387;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_143 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- indvar_flatten_reg_132 assign process. --
    indvar_flatten_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_371 = ap_const_lv1_0))) then 
                indvar_flatten_reg_132 <= indvar_flatten_next_reg_375;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                indvar_flatten_reg_132 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_154 assign process. --
    j_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_371 = ap_const_lv1_0))) then 
                j_reg_154 <= j_1_reg_438;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_154 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                exitcond_flatten_reg_371 <= exitcond_flatten_fu_166_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (exitcond_flatten_fu_166_p2 = ap_const_lv1_0))) then
                i_mid2_reg_387 <= i_mid2_fu_198_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                indvar_flatten_next_reg_375 <= indvar_flatten_next_fu_172_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_371 = ap_const_lv1_0))) then
                j_1_reg_438 <= j_1_fu_334_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (exitcond_flatten_fu_166_p2 = ap_const_lv1_0))) then
                j_mid2_reg_380 <= j_mid2_fu_184_p3;
                p_addr_cast1_reg_392 <= p_addr_cast1_fu_232_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (exitcond_flatten_reg_371 = ap_const_lv1_0))) then
                p_addr2_reg_418 <= p_addr2_fu_282_p2;
                tmp1_reg_433 <= grp_fu_363_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_flatten_fu_166_p2, ap_reg_ppiten_pp0_it0)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((exitcond_flatten_fu_166_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_3;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st5_fsm_3 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- a_address0 assign process. --
    a_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, tmp_2_fu_240_p1, tmp_8_fu_304_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                a_address0 <= tmp_8_fu_304_p1(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                a_address0 <= tmp_2_fu_240_p1(4 - 1 downto 0);
            else 
                a_address0 <= "XXXX";
            end if;
        else 
            a_address0 <= "XXXX";
        end if; 
    end process;

    a_address1 <= tmp_s_fu_260_p1(4 - 1 downto 0);

    -- a_ce0 assign process. --
    a_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- a_ce1 assign process. --
    a_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st5_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st5_fsm_3)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_278 assign process. --
    ap_sig_bdd_278_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_278 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_65 assign process. --
    ap_sig_bdd_65_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_65 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_99 assign process. --
    ap_sig_bdd_99_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_99 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_65)
    begin
        if (ap_sig_bdd_65) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_99)
    begin
        if (ap_sig_bdd_99) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_3 assign process. --
    ap_sig_cseq_ST_st5_fsm_3_assign_proc : process(ap_sig_bdd_278)
    begin
        if (ap_sig_bdd_278) then 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_address0 assign process. --
    b_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2, tmp_4_fu_245_p1, tmp_9_fu_315_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                b_address0 <= tmp_9_fu_315_p1(4 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then 
                b_address0 <= tmp_4_fu_245_p1(4 - 1 downto 0);
            else 
                b_address0 <= "XXXX";
            end if;
        else 
            b_address0 <= "XXXX";
        end if; 
    end process;

    b_address1 <= tmp_10_fu_271_p1(4 - 1 downto 0);

    -- b_ce0 assign process. --
    b_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg1_fsm_2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- b_ce1 assign process. --
    b_ce1_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it0)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_166_p2 <= "1" when (indvar_flatten_phi_fu_136_p4 = ap_const_lv4_9) else "0";
    exitcond_fu_178_p2 <= "1" when (j_phi_fu_158_p4 = ap_const_lv2_3) else "0";
    grp_fu_355_p0 <= b_q0;
    grp_fu_355_p1 <= a_q0;
    grp_fu_355_p2 <= tmp1_reg_433;
    grp_fu_363_p0 <= b_q0;
    grp_fu_363_p1 <= a_q0;
    grp_fu_363_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp_7_2_fu_328_p0) * signed(tmp_7_2_fu_328_p1))), 16));
    i_mid2_fu_198_p3 <= 
        i_s_fu_192_p2 when (exitcond_fu_178_p2(0) = '1') else 
        i_phi_fu_147_p4;

    -- i_phi_fu_147_p4 assign process. --
    i_phi_fu_147_p4_assign_proc : process(i_reg_143, exitcond_flatten_reg_371, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, i_mid2_reg_387)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_371 = ap_const_lv1_0))) then 
            i_phi_fu_147_p4 <= i_mid2_reg_387;
        else 
            i_phi_fu_147_p4 <= i_reg_143;
        end if; 
    end process;

    i_s_fu_192_p2 <= std_logic_vector(unsigned(i_phi_fu_147_p4) + unsigned(ap_const_lv2_1));
    indvar_flatten_next_fu_172_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_136_p4) + unsigned(ap_const_lv4_1));

    -- indvar_flatten_phi_fu_136_p4 assign process. --
    indvar_flatten_phi_fu_136_p4_assign_proc : process(indvar_flatten_reg_132, exitcond_flatten_reg_371, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, indvar_flatten_next_reg_375)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_371 = ap_const_lv1_0))) then 
            indvar_flatten_phi_fu_136_p4 <= indvar_flatten_next_reg_375;
        else 
            indvar_flatten_phi_fu_136_p4 <= indvar_flatten_reg_132;
        end if; 
    end process;

    j_1_fu_334_p2 <= std_logic_vector(unsigned(j_mid2_reg_380) + unsigned(ap_const_lv2_1));
    j_mid2_fu_184_p3 <= 
        ap_const_lv2_0 when (exitcond_fu_178_p2(0) = '1') else 
        j_phi_fu_158_p4;

    -- j_phi_fu_158_p4 assign process. --
    j_phi_fu_158_p4_assign_proc : process(j_reg_154, exitcond_flatten_reg_371, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1, j_1_reg_438)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_371 = ap_const_lv1_0))) then 
            j_phi_fu_158_p4 <= j_1_reg_438;
        else 
            j_phi_fu_158_p4 <= j_reg_154;
        end if; 
    end process;

        p_addr1_cast_fu_256_p1 <= std_logic_vector(resize(signed(p_addr1_fu_250_p2),32));

    p_addr1_fu_250_p2 <= std_logic_vector(signed(p_addr_cast1_fu_232_p1) + signed(ap_const_lv6_2));
        p_addr2_cast_fu_339_p1 <= std_logic_vector(resize(signed(p_addr2_reg_418),32));

    p_addr2_fu_282_p2 <= std_logic_vector(signed(p_addr_cast1_reg_392) + signed(tmp_2_trn_cast_fu_279_p1));
    p_addr3_fu_309_p2 <= std_logic_vector(unsigned(tmp_2_trn_cast2_fu_276_p1) + unsigned(ap_const_lv3_3));
        p_addr4_cast_fu_300_p1 <= std_logic_vector(resize(signed(p_addr4_fu_295_p2),32));

    p_addr4_fu_295_p2 <= std_logic_vector(signed(p_addr_cast1_reg_392) + signed(ap_const_lv6_1));
    p_addr9_fu_265_p2 <= std_logic_vector(unsigned(tmp_2_trn_cast1_fu_210_p1) + unsigned(ap_const_lv4_6));
        p_addr_cast1_fu_232_p1 <= std_logic_vector(resize(signed(p_addr_fu_226_p2),6));

        p_addr_cast_fu_236_p1 <= std_logic_vector(resize(signed(p_addr_fu_226_p2),32));

    p_addr_fu_226_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_222_p1) - unsigned(tmp_trn_cast_fu_206_p1));
    p_shl_cast_fu_222_p1 <= std_logic_vector(resize(unsigned(tmp_fu_214_p3),5));
    res_address0 <= tmp_1_fu_342_p1(4 - 1 downto 0);

    -- res_ce0 assign process. --
    res_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            res_ce0 <= ap_const_logic_1;
        else 
            res_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_d0 <= grp_fu_355_p3;

    -- res_we0 assign process. --
    res_we0_assign_proc : process(exitcond_flatten_reg_371, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (exitcond_flatten_reg_371 = ap_const_lv1_0)))) then 
            res_we0 <= ap_const_logic_1;
        else 
            res_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_271_p1 <= std_logic_vector(resize(unsigned(p_addr9_fu_265_p2),64));
    tmp_1_fu_342_p1 <= std_logic_vector(resize(unsigned(p_addr2_cast_fu_339_p1),64));
    tmp_2_fu_240_p1 <= std_logic_vector(resize(unsigned(p_addr_cast_fu_236_p1),64));
    tmp_2_trn_cast1_fu_210_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_184_p3),4));
    tmp_2_trn_cast2_fu_276_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_380),3));
    tmp_2_trn_cast_fu_279_p1 <= std_logic_vector(resize(unsigned(j_mid2_reg_380),6));
    tmp_4_fu_245_p1 <= std_logic_vector(resize(unsigned(j_mid2_fu_184_p3),64));
    tmp_7_2_fu_328_p0 <= b_q1;
    tmp_7_2_fu_328_p1 <= a_q1;
    tmp_8_fu_304_p1 <= std_logic_vector(resize(unsigned(p_addr4_cast_fu_300_p1),64));
    tmp_9_fu_315_p1 <= std_logic_vector(resize(unsigned(p_addr3_fu_309_p2),64));
    tmp_fu_214_p3 <= (i_mid2_fu_198_p3 & ap_const_lv2_0);
    tmp_s_fu_260_p1 <= std_logic_vector(resize(unsigned(p_addr1_cast_fu_256_p1),64));
    tmp_trn_cast_fu_206_p1 <= std_logic_vector(resize(unsigned(i_mid2_fu_198_p3),5));
end behav;
