

================================================================
== Vivado HLS Report for 'array_io'
================================================================
* Date:           Sun Sep 27 22:39:58 2015

* Version:        2015.1 (Build 1215546 on Mon Apr 27 19:24:50 PM 2015)
* Project:        array_io_prj
* Solution:       solution2
* Product family: kintex7
* Target device:  xc7k160tfbg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |   4.00|      2.70|        0.50|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   33|   33|   34|   34|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+--------+
|       Name      | BRAM_18K| DSP48E|   FF   |   LUT  |
+-----------------+---------+-------+--------+--------+
|Expression       |        -|      -|       -|       -|
|FIFO             |        -|      -|       -|       -|
|Instance         |        -|      -|       -|       -|
|Memory           |        -|      -|       -|       -|
|Multiplexer      |        -|      -|       -|       -|
|Register         |        -|      -|       -|       -|
+-----------------+---------+-------+--------+--------+
|Total            |        0|      0|       0|       0|
+-----------------+---------+-------+--------+--------+
|Available        |      650|    600|  202800|  101400|
+-----------------+---------+-------+--------+--------+
|Utilization (%)  |        0|      0|       0|       0|
+-----------------+---------+-------+--------+--------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 34
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: d_i_addr [1/1] 0.00ns
:6  %d_i_addr = getelementptr [32 x i16]* %d_i, i64 0, i64 0

ST_1: d_i_load [2/2] 2.39ns
:7  %d_i_load = load i16* %d_i_addr, align 2


 <State 2>: 2.39ns
ST_2: d_i_load [1/2] 2.39ns
:7  %d_i_load = load i16* %d_i_addr, align 2

ST_2: d_i_addr_1 [1/1] 0.00ns
:13  %d_i_addr_1 = getelementptr [32 x i16]* %d_i, i64 0, i64 1

ST_2: d_i_load_1 [2/2] 2.39ns
:14  %d_i_load_1 = load i16* %d_i_addr_1, align 2


 <State 3>: 2.70ns
ST_3: acc_0_load [1/1] 0.00ns
:5  %acc_0_load = load i32* @acc_0, align 4

ST_3: tmp_2 [1/1] 0.00ns
:8  %tmp_2 = sext i16 %d_i_load to i32

ST_3: acc_0_loc_assign_2 [1/1] 1.70ns
:9  %acc_0_loc_assign_2 = add nsw i32 %acc_0_load, %tmp_2

ST_3: tmp [1/1] 0.00ns
:10  %tmp = trunc i32 %acc_0_loc_assign_2 to i16

ST_3: stg_44 [1/1] 1.00ns
:11  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp)

ST_3: d_i_load_1 [1/2] 2.39ns
:14  %d_i_load_1 = load i16* %d_i_addr_1, align 2

ST_3: d_i_addr_2 [1/1] 0.00ns
:20  %d_i_addr_2 = getelementptr [32 x i16]* %d_i, i64 0, i64 2

ST_3: d_i_load_2 [2/2] 2.39ns
:21  %d_i_load_2 = load i16* %d_i_addr_2, align 2


 <State 4>: 2.70ns
ST_4: acc_1_load [1/1] 0.00ns
:12  %acc_1_load = load i32* @acc_1, align 4

ST_4: tmp_2_1 [1/1] 0.00ns
:15  %tmp_2_1 = sext i16 %d_i_load_1 to i32

ST_4: acc_1_loc_assign_2 [1/1] 1.70ns
:16  %acc_1_loc_assign_2 = add nsw i32 %acc_1_load, %tmp_2_1

ST_4: tmp_1 [1/1] 0.00ns
:17  %tmp_1 = trunc i32 %acc_1_loc_assign_2 to i16

ST_4: stg_52 [1/1] 1.00ns
:18  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_1)

ST_4: d_i_load_2 [1/2] 2.39ns
:21  %d_i_load_2 = load i16* %d_i_addr_2, align 2

ST_4: d_i_addr_3 [1/1] 0.00ns
:27  %d_i_addr_3 = getelementptr [32 x i16]* %d_i, i64 0, i64 3

ST_4: d_i_load_3 [2/2] 2.39ns
:28  %d_i_load_3 = load i16* %d_i_addr_3, align 2


 <State 5>: 2.70ns
ST_5: acc_2_load [1/1] 0.00ns
:19  %acc_2_load = load i32* @acc_2, align 4

ST_5: tmp_2_2 [1/1] 0.00ns
:22  %tmp_2_2 = sext i16 %d_i_load_2 to i32

ST_5: acc_2_loc_assign_2 [1/1] 1.70ns
:23  %acc_2_loc_assign_2 = add nsw i32 %acc_2_load, %tmp_2_2

ST_5: tmp_3 [1/1] 0.00ns
:24  %tmp_3 = trunc i32 %acc_2_loc_assign_2 to i16

ST_5: stg_60 [1/1] 1.00ns
:25  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_3)

ST_5: d_i_load_3 [1/2] 2.39ns
:28  %d_i_load_3 = load i16* %d_i_addr_3, align 2

ST_5: d_i_addr_4 [1/1] 0.00ns
:34  %d_i_addr_4 = getelementptr [32 x i16]* %d_i, i64 0, i64 4

ST_5: d_i_load_4 [2/2] 2.39ns
:35  %d_i_load_4 = load i16* %d_i_addr_4, align 2


 <State 6>: 2.70ns
ST_6: acc_3_load [1/1] 0.00ns
:26  %acc_3_load = load i32* @acc_3, align 4

ST_6: tmp_2_3 [1/1] 0.00ns
:29  %tmp_2_3 = sext i16 %d_i_load_3 to i32

ST_6: acc_3_loc_assign_2 [1/1] 1.70ns
:30  %acc_3_loc_assign_2 = add nsw i32 %acc_3_load, %tmp_2_3

ST_6: tmp_4 [1/1] 0.00ns
:31  %tmp_4 = trunc i32 %acc_3_loc_assign_2 to i16

ST_6: stg_68 [1/1] 1.00ns
:32  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_4)

ST_6: d_i_load_4 [1/2] 2.39ns
:35  %d_i_load_4 = load i16* %d_i_addr_4, align 2

ST_6: d_i_addr_5 [1/1] 0.00ns
:41  %d_i_addr_5 = getelementptr [32 x i16]* %d_i, i64 0, i64 5

ST_6: d_i_load_5 [2/2] 2.39ns
:42  %d_i_load_5 = load i16* %d_i_addr_5, align 2


 <State 7>: 2.70ns
ST_7: acc_4_load [1/1] 0.00ns
:33  %acc_4_load = load i32* @acc_4, align 4

ST_7: tmp_2_4 [1/1] 0.00ns
:36  %tmp_2_4 = sext i16 %d_i_load_4 to i32

ST_7: acc_4_loc_assign_2 [1/1] 1.70ns
:37  %acc_4_loc_assign_2 = add nsw i32 %acc_4_load, %tmp_2_4

ST_7: tmp_5 [1/1] 0.00ns
:38  %tmp_5 = trunc i32 %acc_4_loc_assign_2 to i16

ST_7: stg_76 [1/1] 1.00ns
:39  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_5)

ST_7: d_i_load_5 [1/2] 2.39ns
:42  %d_i_load_5 = load i16* %d_i_addr_5, align 2

ST_7: d_i_addr_6 [1/1] 0.00ns
:48  %d_i_addr_6 = getelementptr [32 x i16]* %d_i, i64 0, i64 6

ST_7: d_i_load_6 [2/2] 2.39ns
:49  %d_i_load_6 = load i16* %d_i_addr_6, align 2


 <State 8>: 2.70ns
ST_8: acc_5_load [1/1] 0.00ns
:40  %acc_5_load = load i32* @acc_5, align 4

ST_8: tmp_2_5 [1/1] 0.00ns
:43  %tmp_2_5 = sext i16 %d_i_load_5 to i32

ST_8: acc_5_loc_assign_2 [1/1] 1.70ns
:44  %acc_5_loc_assign_2 = add nsw i32 %acc_5_load, %tmp_2_5

ST_8: tmp_6 [1/1] 0.00ns
:45  %tmp_6 = trunc i32 %acc_5_loc_assign_2 to i16

ST_8: stg_84 [1/1] 1.00ns
:46  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_6)

ST_8: d_i_load_6 [1/2] 2.39ns
:49  %d_i_load_6 = load i16* %d_i_addr_6, align 2

ST_8: d_i_addr_7 [1/1] 0.00ns
:55  %d_i_addr_7 = getelementptr [32 x i16]* %d_i, i64 0, i64 7

ST_8: d_i_load_7 [2/2] 2.39ns
:56  %d_i_load_7 = load i16* %d_i_addr_7, align 2


 <State 9>: 2.70ns
ST_9: acc_6_load [1/1] 0.00ns
:47  %acc_6_load = load i32* @acc_6, align 4

ST_9: tmp_2_6 [1/1] 0.00ns
:50  %tmp_2_6 = sext i16 %d_i_load_6 to i32

ST_9: acc_6_loc_assign_2 [1/1] 1.70ns
:51  %acc_6_loc_assign_2 = add nsw i32 %acc_6_load, %tmp_2_6

ST_9: tmp_7 [1/1] 0.00ns
:52  %tmp_7 = trunc i32 %acc_6_loc_assign_2 to i16

ST_9: stg_92 [1/1] 1.00ns
:53  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_7)

ST_9: d_i_load_7 [1/2] 2.39ns
:56  %d_i_load_7 = load i16* %d_i_addr_7, align 2

ST_9: d_i_addr_8 [1/1] 0.00ns
:61  %d_i_addr_8 = getelementptr [32 x i16]* %d_i, i64 0, i64 8

ST_9: d_i_load_8 [2/2] 2.39ns
:62  %d_i_load_8 = load i16* %d_i_addr_8, align 2


 <State 10>: 2.70ns
ST_10: acc_7_load [1/1] 0.00ns
:54  %acc_7_load = load i32* @acc_7, align 4

ST_10: tmp_2_7 [1/1] 0.00ns
:57  %tmp_2_7 = sext i16 %d_i_load_7 to i32

ST_10: acc_7_loc_assign_2 [1/1] 1.70ns
:58  %acc_7_loc_assign_2 = add nsw i32 %acc_7_load, %tmp_2_7

ST_10: tmp_8 [1/1] 0.00ns
:59  %tmp_8 = trunc i32 %acc_7_loc_assign_2 to i16

ST_10: stg_100 [1/1] 1.00ns
:60  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_8)

ST_10: d_i_load_8 [1/2] 2.39ns
:62  %d_i_load_8 = load i16* %d_i_addr_8, align 2

ST_10: d_i_addr_9 [1/1] 0.00ns
:67  %d_i_addr_9 = getelementptr [32 x i16]* %d_i, i64 0, i64 9

ST_10: d_i_load_9 [2/2] 2.39ns
:68  %d_i_load_9 = load i16* %d_i_addr_9, align 2


 <State 11>: 2.70ns
ST_11: tmp_2_8 [1/1] 0.00ns
:63  %tmp_2_8 = sext i16 %d_i_load_8 to i32

ST_11: acc_0_loc_assign_1 [1/1] 1.70ns
:64  %acc_0_loc_assign_1 = add nsw i32 %acc_0_loc_assign_2, %tmp_2_8

ST_11: tmp_9 [1/1] 0.00ns
:65  %tmp_9 = trunc i32 %acc_0_loc_assign_1 to i16

ST_11: stg_107 [1/1] 1.00ns
:66  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_9)

ST_11: d_i_load_9 [1/2] 2.39ns
:68  %d_i_load_9 = load i16* %d_i_addr_9, align 2

ST_11: d_i_addr_10 [1/1] 0.00ns
:73  %d_i_addr_10 = getelementptr [32 x i16]* %d_i, i64 0, i64 10

ST_11: d_i_load_10 [2/2] 2.39ns
:74  %d_i_load_10 = load i16* %d_i_addr_10, align 2


 <State 12>: 2.70ns
ST_12: tmp_2_9 [1/1] 0.00ns
:69  %tmp_2_9 = sext i16 %d_i_load_9 to i32

ST_12: acc_1_loc_assign_1 [1/1] 1.70ns
:70  %acc_1_loc_assign_1 = add nsw i32 %acc_1_loc_assign_2, %tmp_2_9

ST_12: tmp_10 [1/1] 0.00ns
:71  %tmp_10 = trunc i32 %acc_1_loc_assign_1 to i16

ST_12: stg_114 [1/1] 1.00ns
:72  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_10)

ST_12: d_i_load_10 [1/2] 2.39ns
:74  %d_i_load_10 = load i16* %d_i_addr_10, align 2

ST_12: d_i_addr_11 [1/1] 0.00ns
:79  %d_i_addr_11 = getelementptr [32 x i16]* %d_i, i64 0, i64 11

ST_12: d_i_load_11 [2/2] 2.39ns
:80  %d_i_load_11 = load i16* %d_i_addr_11, align 2


 <State 13>: 2.70ns
ST_13: tmp_2_s [1/1] 0.00ns
:75  %tmp_2_s = sext i16 %d_i_load_10 to i32

ST_13: acc_2_loc_assign_1 [1/1] 1.70ns
:76  %acc_2_loc_assign_1 = add nsw i32 %acc_2_loc_assign_2, %tmp_2_s

ST_13: tmp_11 [1/1] 0.00ns
:77  %tmp_11 = trunc i32 %acc_2_loc_assign_1 to i16

ST_13: stg_121 [1/1] 1.00ns
:78  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_11)

ST_13: d_i_load_11 [1/2] 2.39ns
:80  %d_i_load_11 = load i16* %d_i_addr_11, align 2

ST_13: d_i_addr_12 [1/1] 0.00ns
:85  %d_i_addr_12 = getelementptr [32 x i16]* %d_i, i64 0, i64 12

ST_13: d_i_load_12 [2/2] 2.39ns
:86  %d_i_load_12 = load i16* %d_i_addr_12, align 2


 <State 14>: 2.70ns
ST_14: tmp_2_10 [1/1] 0.00ns
:81  %tmp_2_10 = sext i16 %d_i_load_11 to i32

ST_14: acc_3_loc_assign_1 [1/1] 1.70ns
:82  %acc_3_loc_assign_1 = add nsw i32 %acc_3_loc_assign_2, %tmp_2_10

ST_14: tmp_12 [1/1] 0.00ns
:83  %tmp_12 = trunc i32 %acc_3_loc_assign_1 to i16

ST_14: stg_128 [1/1] 1.00ns
:84  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_12)

ST_14: d_i_load_12 [1/2] 2.39ns
:86  %d_i_load_12 = load i16* %d_i_addr_12, align 2

ST_14: d_i_addr_13 [1/1] 0.00ns
:91  %d_i_addr_13 = getelementptr [32 x i16]* %d_i, i64 0, i64 13

ST_14: d_i_load_13 [2/2] 2.39ns
:92  %d_i_load_13 = load i16* %d_i_addr_13, align 2


 <State 15>: 2.70ns
ST_15: tmp_2_11 [1/1] 0.00ns
:87  %tmp_2_11 = sext i16 %d_i_load_12 to i32

ST_15: acc_4_loc_assign_1 [1/1] 1.70ns
:88  %acc_4_loc_assign_1 = add nsw i32 %acc_4_loc_assign_2, %tmp_2_11

ST_15: tmp_13 [1/1] 0.00ns
:89  %tmp_13 = trunc i32 %acc_4_loc_assign_1 to i16

ST_15: stg_135 [1/1] 1.00ns
:90  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_13)

ST_15: d_i_load_13 [1/2] 2.39ns
:92  %d_i_load_13 = load i16* %d_i_addr_13, align 2

ST_15: d_i_addr_14 [1/1] 0.00ns
:97  %d_i_addr_14 = getelementptr [32 x i16]* %d_i, i64 0, i64 14

ST_15: d_i_load_14 [2/2] 2.39ns
:98  %d_i_load_14 = load i16* %d_i_addr_14, align 2


 <State 16>: 2.70ns
ST_16: tmp_2_12 [1/1] 0.00ns
:93  %tmp_2_12 = sext i16 %d_i_load_13 to i32

ST_16: acc_5_loc_assign_1 [1/1] 1.70ns
:94  %acc_5_loc_assign_1 = add nsw i32 %acc_5_loc_assign_2, %tmp_2_12

ST_16: tmp_14 [1/1] 0.00ns
:95  %tmp_14 = trunc i32 %acc_5_loc_assign_1 to i16

ST_16: stg_142 [1/1] 1.00ns
:96  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_14)

ST_16: d_i_load_14 [1/2] 2.39ns
:98  %d_i_load_14 = load i16* %d_i_addr_14, align 2

ST_16: d_i_addr_15 [1/1] 0.00ns
:103  %d_i_addr_15 = getelementptr [32 x i16]* %d_i, i64 0, i64 15

ST_16: d_i_load_15 [2/2] 2.39ns
:104  %d_i_load_15 = load i16* %d_i_addr_15, align 2


 <State 17>: 2.70ns
ST_17: tmp_2_13 [1/1] 0.00ns
:99  %tmp_2_13 = sext i16 %d_i_load_14 to i32

ST_17: acc_6_loc_assign_1 [1/1] 1.70ns
:100  %acc_6_loc_assign_1 = add nsw i32 %acc_6_loc_assign_2, %tmp_2_13

ST_17: tmp_15 [1/1] 0.00ns
:101  %tmp_15 = trunc i32 %acc_6_loc_assign_1 to i16

ST_17: stg_149 [1/1] 1.00ns
:102  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_15)

ST_17: d_i_load_15 [1/2] 2.39ns
:104  %d_i_load_15 = load i16* %d_i_addr_15, align 2

ST_17: d_i_addr_16 [1/1] 0.00ns
:109  %d_i_addr_16 = getelementptr [32 x i16]* %d_i, i64 0, i64 16

ST_17: d_i_load_16 [2/2] 2.39ns
:110  %d_i_load_16 = load i16* %d_i_addr_16, align 2


 <State 18>: 2.70ns
ST_18: tmp_2_14 [1/1] 0.00ns
:105  %tmp_2_14 = sext i16 %d_i_load_15 to i32

ST_18: acc_7_loc_assign_1 [1/1] 1.70ns
:106  %acc_7_loc_assign_1 = add nsw i32 %acc_7_loc_assign_2, %tmp_2_14

ST_18: tmp_16 [1/1] 0.00ns
:107  %tmp_16 = trunc i32 %acc_7_loc_assign_1 to i16

ST_18: stg_156 [1/1] 1.00ns
:108  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_16)

ST_18: d_i_load_16 [1/2] 2.39ns
:110  %d_i_load_16 = load i16* %d_i_addr_16, align 2

ST_18: d_i_addr_17 [1/1] 0.00ns
:115  %d_i_addr_17 = getelementptr [32 x i16]* %d_i, i64 0, i64 17

ST_18: d_i_load_17 [2/2] 2.39ns
:116  %d_i_load_17 = load i16* %d_i_addr_17, align 2

ST_18: d_i_addr_18 [1/1] 0.00ns
:121  %d_i_addr_18 = getelementptr [32 x i16]* %d_i, i64 0, i64 18

ST_18: d_i_load_18 [2/2] 2.39ns
:122  %d_i_load_18 = load i16* %d_i_addr_18, align 2


 <State 19>: 2.70ns
ST_19: tmp_2_15 [1/1] 0.00ns
:111  %tmp_2_15 = sext i16 %d_i_load_16 to i32

ST_19: acc_0_loc [1/1] 1.70ns
:112  %acc_0_loc = add nsw i32 %acc_0_loc_assign_1, %tmp_2_15

ST_19: tmp_17 [1/1] 0.00ns
:113  %tmp_17 = trunc i32 %acc_0_loc to i16

ST_19: stg_165 [1/1] 1.00ns
:114  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_17)

ST_19: d_i_load_17 [1/2] 2.39ns
:116  %d_i_load_17 = load i16* %d_i_addr_17, align 2

ST_19: d_i_load_18 [1/2] 2.39ns
:122  %d_i_load_18 = load i16* %d_i_addr_18, align 2

ST_19: d_i_addr_19 [1/1] 0.00ns
:127  %d_i_addr_19 = getelementptr [32 x i16]* %d_i, i64 0, i64 19

ST_19: d_i_load_19 [2/2] 2.39ns
:128  %d_i_load_19 = load i16* %d_i_addr_19, align 2

ST_19: d_i_addr_20 [1/1] 0.00ns
:133  %d_i_addr_20 = getelementptr [32 x i16]* %d_i, i64 0, i64 20

ST_19: d_i_load_20 [2/2] 2.39ns
:134  %d_i_load_20 = load i16* %d_i_addr_20, align 2


 <State 20>: 2.70ns
ST_20: tmp_2_16 [1/1] 0.00ns
:117  %tmp_2_16 = sext i16 %d_i_load_17 to i32

ST_20: acc_1_loc [1/1] 1.70ns
:118  %acc_1_loc = add nsw i32 %acc_1_loc_assign_1, %tmp_2_16

ST_20: tmp_18 [1/1] 0.00ns
:119  %tmp_18 = trunc i32 %acc_1_loc to i16

ST_20: stg_175 [1/1] 1.00ns
:120  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_18)

ST_20: d_i_load_19 [1/2] 2.39ns
:128  %d_i_load_19 = load i16* %d_i_addr_19, align 2

ST_20: d_i_load_20 [1/2] 2.39ns
:134  %d_i_load_20 = load i16* %d_i_addr_20, align 2

ST_20: d_i_addr_21 [1/1] 0.00ns
:139  %d_i_addr_21 = getelementptr [32 x i16]* %d_i, i64 0, i64 21

ST_20: d_i_load_21 [2/2] 2.39ns
:140  %d_i_load_21 = load i16* %d_i_addr_21, align 2

ST_20: d_i_addr_22 [1/1] 0.00ns
:145  %d_i_addr_22 = getelementptr [32 x i16]* %d_i, i64 0, i64 22

ST_20: d_i_load_22 [2/2] 2.39ns
:146  %d_i_load_22 = load i16* %d_i_addr_22, align 2


 <State 21>: 2.70ns
ST_21: tmp_2_17 [1/1] 0.00ns
:123  %tmp_2_17 = sext i16 %d_i_load_18 to i32

ST_21: acc_2_loc [1/1] 1.70ns
:124  %acc_2_loc = add nsw i32 %acc_2_loc_assign_1, %tmp_2_17

ST_21: tmp_19 [1/1] 0.00ns
:125  %tmp_19 = trunc i32 %acc_2_loc to i16

ST_21: stg_185 [1/1] 1.00ns
:126  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_19)

ST_21: d_i_load_21 [1/2] 2.39ns
:140  %d_i_load_21 = load i16* %d_i_addr_21, align 2

ST_21: d_i_load_22 [1/2] 2.39ns
:146  %d_i_load_22 = load i16* %d_i_addr_22, align 2

ST_21: d_i_addr_23 [1/1] 0.00ns
:151  %d_i_addr_23 = getelementptr [32 x i16]* %d_i, i64 0, i64 23

ST_21: d_i_load_23 [2/2] 2.39ns
:152  %d_i_load_23 = load i16* %d_i_addr_23, align 2

ST_21: d_i_addr_24 [1/1] 0.00ns
:157  %d_i_addr_24 = getelementptr [32 x i16]* %d_i, i64 0, i64 24

ST_21: d_i_load_24 [2/2] 2.39ns
:158  %d_i_load_24 = load i16* %d_i_addr_24, align 2


 <State 22>: 2.70ns
ST_22: tmp_2_18 [1/1] 0.00ns
:129  %tmp_2_18 = sext i16 %d_i_load_19 to i32

ST_22: acc_3_loc [1/1] 1.70ns
:130  %acc_3_loc = add nsw i32 %acc_3_loc_assign_1, %tmp_2_18

ST_22: tmp_20 [1/1] 0.00ns
:131  %tmp_20 = trunc i32 %acc_3_loc to i16

ST_22: stg_195 [1/1] 1.00ns
:132  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_20)

ST_22: d_i_load_23 [1/2] 2.39ns
:152  %d_i_load_23 = load i16* %d_i_addr_23, align 2

ST_22: d_i_load_24 [1/2] 2.39ns
:158  %d_i_load_24 = load i16* %d_i_addr_24, align 2

ST_22: d_i_addr_25 [1/1] 0.00ns
:164  %d_i_addr_25 = getelementptr [32 x i16]* %d_i, i64 0, i64 25

ST_22: d_i_load_25 [2/2] 2.39ns
:165  %d_i_load_25 = load i16* %d_i_addr_25, align 2

ST_22: d_i_addr_26 [1/1] 0.00ns
:171  %d_i_addr_26 = getelementptr [32 x i16]* %d_i, i64 0, i64 26

ST_22: d_i_load_26 [2/2] 2.39ns
:172  %d_i_load_26 = load i16* %d_i_addr_26, align 2


 <State 23>: 2.70ns
ST_23: tmp_2_19 [1/1] 0.00ns
:135  %tmp_2_19 = sext i16 %d_i_load_20 to i32

ST_23: acc_4_loc [1/1] 1.70ns
:136  %acc_4_loc = add nsw i32 %acc_4_loc_assign_1, %tmp_2_19

ST_23: tmp_21 [1/1] 0.00ns
:137  %tmp_21 = trunc i32 %acc_4_loc to i16

ST_23: stg_205 [1/1] 1.00ns
:138  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_21)

ST_23: tmp_2_23 [1/1] 0.00ns
:159  %tmp_2_23 = sext i16 %d_i_load_24 to i32

ST_23: temp_s [1/1] 1.70ns
:160  %temp_s = add nsw i32 %acc_0_loc, %tmp_2_23

ST_23: stg_208 [1/1] 0.00ns
:161  store i32 %temp_s, i32* @acc_0, align 16

ST_23: tmp_25 [1/1] 0.00ns
:162  %tmp_25 = trunc i32 %temp_s to i16

ST_23: d_i_load_25 [1/2] 2.39ns
:165  %d_i_load_25 = load i16* %d_i_addr_25, align 2

ST_23: d_i_load_26 [1/2] 2.39ns
:172  %d_i_load_26 = load i16* %d_i_addr_26, align 2

ST_23: d_i_addr_27 [1/1] 0.00ns
:178  %d_i_addr_27 = getelementptr [32 x i16]* %d_i, i64 0, i64 27

ST_23: d_i_load_27 [2/2] 2.39ns
:179  %d_i_load_27 = load i16* %d_i_addr_27, align 2

ST_23: d_i_addr_28 [1/1] 0.00ns
:185  %d_i_addr_28 = getelementptr [32 x i16]* %d_i, i64 0, i64 28

ST_23: d_i_load_28 [2/2] 2.39ns
:186  %d_i_load_28 = load i16* %d_i_addr_28, align 2


 <State 24>: 2.70ns
ST_24: tmp_2_20 [1/1] 0.00ns
:141  %tmp_2_20 = sext i16 %d_i_load_21 to i32

ST_24: acc_5_loc [1/1] 1.70ns
:142  %acc_5_loc = add nsw i32 %acc_5_loc_assign_1, %tmp_2_20

ST_24: tmp_22 [1/1] 0.00ns
:143  %tmp_22 = trunc i32 %acc_5_loc to i16

ST_24: stg_219 [1/1] 1.00ns
:144  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_22)

ST_24: tmp_2_24 [1/1] 0.00ns
:166  %tmp_2_24 = sext i16 %d_i_load_25 to i32

ST_24: temp_1 [1/1] 1.70ns
:167  %temp_1 = add nsw i32 %acc_1_loc, %tmp_2_24

ST_24: stg_222 [1/1] 0.00ns
:168  store i32 %temp_1, i32* @acc_1, align 4

ST_24: tmp_26 [1/1] 0.00ns
:169  %tmp_26 = trunc i32 %temp_1 to i16

ST_24: tmp_2_25 [1/1] 0.00ns
:173  %tmp_2_25 = sext i16 %d_i_load_26 to i32

ST_24: temp_2 [1/1] 1.70ns
:174  %temp_2 = add nsw i32 %acc_2_loc, %tmp_2_25

ST_24: stg_226 [1/1] 0.00ns
:175  store i32 %temp_2, i32* @acc_2, align 8

ST_24: tmp_27 [1/1] 0.00ns
:176  %tmp_27 = trunc i32 %temp_2 to i16

ST_24: d_i_load_27 [1/2] 2.39ns
:179  %d_i_load_27 = load i16* %d_i_addr_27, align 2

ST_24: d_i_load_28 [1/2] 2.39ns
:186  %d_i_load_28 = load i16* %d_i_addr_28, align 2

ST_24: d_i_addr_29 [1/1] 0.00ns
:192  %d_i_addr_29 = getelementptr [32 x i16]* %d_i, i64 0, i64 29

ST_24: d_i_load_29 [2/2] 2.39ns
:193  %d_i_load_29 = load i16* %d_i_addr_29, align 2

ST_24: d_i_addr_30 [1/1] 0.00ns
:199  %d_i_addr_30 = getelementptr [32 x i16]* %d_i, i64 0, i64 30

ST_24: d_i_load_30 [2/2] 2.39ns
:200  %d_i_load_30 = load i16* %d_i_addr_30, align 2


 <State 25>: 2.70ns
ST_25: tmp_2_21 [1/1] 0.00ns
:147  %tmp_2_21 = sext i16 %d_i_load_22 to i32

ST_25: acc_6_loc [1/1] 1.70ns
:148  %acc_6_loc = add nsw i32 %acc_6_loc_assign_1, %tmp_2_21

ST_25: tmp_23 [1/1] 0.00ns
:149  %tmp_23 = trunc i32 %acc_6_loc to i16

ST_25: stg_237 [1/1] 1.00ns
:150  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_23)

ST_25: tmp_2_26 [1/1] 0.00ns
:180  %tmp_2_26 = sext i16 %d_i_load_27 to i32

ST_25: temp_3 [1/1] 1.70ns
:181  %temp_3 = add nsw i32 %acc_3_loc, %tmp_2_26

ST_25: stg_240 [1/1] 0.00ns
:182  store i32 %temp_3, i32* @acc_3, align 4

ST_25: tmp_28 [1/1] 0.00ns
:183  %tmp_28 = trunc i32 %temp_3 to i16

ST_25: tmp_2_27 [1/1] 0.00ns
:187  %tmp_2_27 = sext i16 %d_i_load_28 to i32

ST_25: temp_4 [1/1] 1.70ns
:188  %temp_4 = add nsw i32 %acc_4_loc, %tmp_2_27

ST_25: stg_244 [1/1] 0.00ns
:189  store i32 %temp_4, i32* @acc_4, align 16

ST_25: tmp_29 [1/1] 0.00ns
:190  %tmp_29 = trunc i32 %temp_4 to i16

ST_25: d_i_load_29 [1/2] 2.39ns
:193  %d_i_load_29 = load i16* %d_i_addr_29, align 2

ST_25: d_i_load_30 [1/2] 2.39ns
:200  %d_i_load_30 = load i16* %d_i_addr_30, align 2

ST_25: d_i_addr_31 [1/1] 0.00ns
:206  %d_i_addr_31 = getelementptr [32 x i16]* %d_i, i64 0, i64 31

ST_25: d_i_load_31 [2/2] 2.39ns
:207  %d_i_load_31 = load i16* %d_i_addr_31, align 2


 <State 26>: 2.70ns
ST_26: tmp_2_22 [1/1] 0.00ns
:153  %tmp_2_22 = sext i16 %d_i_load_23 to i32

ST_26: acc_7_loc [1/1] 1.70ns
:154  %acc_7_loc = add nsw i32 %acc_7_loc_assign_1, %tmp_2_22

ST_26: tmp_24 [1/1] 0.00ns
:155  %tmp_24 = trunc i32 %acc_7_loc to i16

ST_26: stg_253 [1/1] 1.00ns
:156  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_24)

ST_26: tmp_2_28 [1/1] 0.00ns
:194  %tmp_2_28 = sext i16 %d_i_load_29 to i32

ST_26: temp_5 [1/1] 1.70ns
:195  %temp_5 = add nsw i32 %acc_5_loc, %tmp_2_28

ST_26: stg_256 [1/1] 0.00ns
:196  store i32 %temp_5, i32* @acc_5, align 4

ST_26: tmp_30 [1/1] 0.00ns
:197  %tmp_30 = trunc i32 %temp_5 to i16

ST_26: tmp_2_29 [1/1] 0.00ns
:201  %tmp_2_29 = sext i16 %d_i_load_30 to i32

ST_26: temp_6 [1/1] 1.70ns
:202  %temp_6 = add nsw i32 %acc_6_loc, %tmp_2_29

ST_26: stg_260 [1/1] 0.00ns
:203  store i32 %temp_6, i32* @acc_6, align 8

ST_26: tmp_31 [1/1] 0.00ns
:204  %tmp_31 = trunc i32 %temp_6 to i16

ST_26: d_i_load_31 [1/2] 2.39ns
:207  %d_i_load_31 = load i16* %d_i_addr_31, align 2


 <State 27>: 1.70ns
ST_27: stg_263 [1/1] 1.00ns
:163  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_25)

ST_27: tmp_2_30 [1/1] 0.00ns
:208  %tmp_2_30 = sext i16 %d_i_load_31 to i32

ST_27: temp_7 [1/1] 1.70ns
:209  %temp_7 = add nsw i32 %acc_7_loc, %tmp_2_30

ST_27: stg_266 [1/1] 0.00ns
:210  store i32 %temp_7, i32* @acc_7, align 4

ST_27: tmp_32 [1/1] 0.00ns
:211  %tmp_32 = trunc i32 %temp_7 to i16


 <State 28>: 1.00ns
ST_28: stg_268 [1/1] 1.00ns
:170  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_26)


 <State 29>: 1.00ns
ST_29: stg_269 [1/1] 1.00ns
:177  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_27)


 <State 30>: 1.00ns
ST_30: stg_270 [1/1] 1.00ns
:184  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_28)


 <State 31>: 1.00ns
ST_31: stg_271 [1/1] 1.00ns
:191  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_29)


 <State 32>: 1.00ns
ST_32: stg_272 [1/1] 1.00ns
:198  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_30)


 <State 33>: 1.00ns
ST_33: stg_273 [1/1] 1.00ns
:205  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_31)


 <State 34>: 1.00ns
ST_34: stg_274 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(i16* %d_o), !map !0

ST_34: stg_275 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap([32 x i16]* %d_i) nounwind, !map !6

ST_34: stg_276 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecTopModule([9 x i8]* @str) nounwind

ST_34: stg_277 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecInterface(i16* %d_o, [8 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1)

ST_34: stg_278 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecMemCore([32 x i16]* %d_i, [1 x i8]* @p_str1, [12 x i8]* @p_str2, [1 x i8]* @p_str1, i32 -1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_34: stg_279 [1/1] 1.00ns
:212  call void @_ssdm_op_Write.ap_fifo.volatile.i16P(i16* %d_o, i16 %tmp_32)

ST_34: stg_280 [1/1] 0.00ns
:213  ret void



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
