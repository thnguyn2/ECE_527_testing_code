// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="adders_io,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.700000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=100,HLS_SYN_LUT=101}" *)

module adders_io (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1,
        in1_ap_vld,
        in2,
        in2_ap_ack,
        in_out1_i,
        in_out1_i_ap_vld,
        in_out1_i_ap_ack,
        in_out1_o,
        in_out1_o_ap_vld,
        in_out1_o_ap_ack
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1;
input   in1_ap_vld;
input  [31:0] in2;
output   in2_ap_ack;
input  [31:0] in_out1_i;
input   in_out1_i_ap_vld;
output   in_out1_i_ap_ack;
output  [31:0] in_out1_o;
output   in_out1_o_ap_vld;
input   in_out1_o_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in2_ap_ack;
reg in_out1_i_ap_ack;
reg in_out1_o_ap_vld;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_18;
reg   [31:0] in1_in_sig;
reg   [31:0] in1_preg = 32'b00000000000000000000000000000000;
reg    in1_ap_vld_in_sig;
reg    in1_ap_vld_preg = 1'b0;
reg   [31:0] in_out1_read_reg_69;
reg    ap_sig_bdd_51;
wire   [31:0] tmp1_fu_58_p2;
reg   [31:0] tmp1_reg_74;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_64;
reg    ap_reg_ioackin_in_out1_o_ap_ack = 1'b0;
reg    ap_sig_ioackin_in_out1_o_ap_ack;
reg   [1:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_in_out1_o_ap_ack assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_in_out1_o_ap_ack
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_in_out1_o_ap_ack <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_in_out1_o_ap_ack)) begin
                ap_reg_ioackin_in_out1_o_ap_ack <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == in_out1_o_ap_ack)) begin
                ap_reg_ioackin_in_out1_o_ap_ack <= ap_const_logic_1;
            end
        end
    end
end

/// in1_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_in1_ap_vld_preg
    if (ap_rst == 1'b1) begin
        in1_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == ap_sig_ioackin_in_out1_o_ap_ack))) begin
            in1_ap_vld_preg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == in1_ap_vld) & ~((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_logic_0 == ap_start)))) begin
            in1_ap_vld_preg <= in1_ap_vld;
        end
    end
end

/// in1_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_in1_preg
    if (ap_rst == 1'b1) begin
        in1_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == in1_ap_vld) & ~((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_logic_0 == ap_start)))) begin
            in1_preg <= in1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_51)) begin
        in_out1_read_reg_69 <= in_out1_i;
        tmp1_reg_74 <= tmp1_fu_58_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_ioackin_in_out1_o_ap_ack)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == ap_sig_ioackin_in_out1_o_ap_ack))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_sig_ioackin_in_out1_o_ap_ack)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(ap_const_logic_0 == ap_sig_ioackin_in_out1_o_ap_ack))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_18)
begin
    if (ap_sig_bdd_18) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_64)
begin
    if (ap_sig_bdd_64) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_in_out1_o_ap_ack assign process. ///
always @ (in_out1_o_ap_ack or ap_reg_ioackin_in_out1_o_ap_ack)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_in_out1_o_ap_ack)) begin
        ap_sig_ioackin_in_out1_o_ap_ack = in_out1_o_ap_ack;
    end else begin
        ap_sig_ioackin_in_out1_o_ap_ack = ap_const_logic_1;
    end
end

/// in1_ap_vld_in_sig assign process. ///
always @ (in1_ap_vld or in1_ap_vld_preg)
begin
    if ((ap_const_logic_1 == in1_ap_vld)) begin
        in1_ap_vld_in_sig = in1_ap_vld;
    end else begin
        in1_ap_vld_in_sig = in1_ap_vld_preg;
    end
end

/// in1_in_sig assign process. ///
always @ (in1 or in1_preg or in1_ap_vld)
begin
    if ((ap_const_logic_1 == in1_ap_vld)) begin
        in1_in_sig = in1;
    end else begin
        in1_in_sig = in1_preg;
    end
end

/// in2_ap_ack assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_51)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_51)) begin
        in2_ap_ack = ap_const_logic_1;
    end else begin
        in2_ap_ack = ap_const_logic_0;
    end
end

/// in_out1_i_ap_ack assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_51)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_51)) begin
        in_out1_i_ap_ack = ap_const_logic_1;
    end else begin
        in_out1_i_ap_ack = ap_const_logic_0;
    end
end

/// in_out1_o_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or ap_reg_ioackin_in_out1_o_ap_ack)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (ap_const_logic_0 == ap_reg_ioackin_in_out1_o_ap_ack))) begin
        in_out1_o_ap_vld = ap_const_logic_1;
    end else begin
        in_out1_o_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_51 or ap_sig_ioackin_in_out1_o_ap_ack)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~ap_sig_bdd_51) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_in_out1_o_ap_ack)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_18 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_18 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_51 assign process. ///
always @ (ap_start or in1_ap_vld_in_sig or in_out1_i_ap_vld)
begin
    ap_sig_bdd_51 = ((in1_ap_vld_in_sig == ap_const_logic_0) | (in_out1_i_ap_vld == ap_const_logic_0) | (ap_start == ap_const_logic_0));
end

/// ap_sig_bdd_64 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_64 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end
assign in_out1_o = (tmp1_reg_74 + in_out1_read_reg_69);
assign tmp1_fu_58_p2 = (in2 + in1_in_sig);


endmodule //adders_io

