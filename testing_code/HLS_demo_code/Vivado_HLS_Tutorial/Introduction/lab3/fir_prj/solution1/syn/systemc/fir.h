// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_mul_32s_32s_32_3.h"
#include "fir_shift_reg.h"

namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > y;
    sc_out< sc_logic > y_ap_vld;
    sc_out< sc_lv<4> > c_address0;
    sc_out< sc_logic > c_ce0;
    sc_in< sc_lv<32> > c_q0;
    sc_in< sc_lv<32> > x;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_shift_reg* shift_reg_U;
    fir_mul_32s_32s_32_3<1,3,32,32,32>* fir_mul_32s_32s_32_3_U1;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_24;
    sc_signal< sc_lv<4> > shift_reg_address0;
    sc_signal< sc_logic > shift_reg_ce0;
    sc_signal< sc_logic > shift_reg_we0;
    sc_signal< sc_lv<32> > shift_reg_d0;
    sc_signal< sc_lv<32> > shift_reg_q0;
    sc_signal< sc_lv<32> > i_cast_fu_127_p1;
    sc_signal< sc_lv<32> > i_cast_reg_190;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_62;
    sc_signal< sc_lv<1> > tmp_1_fu_139_p2;
    sc_signal< sc_lv<1> > tmp_1_reg_199;
    sc_signal< sc_lv<1> > tmp_fu_131_p3;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_bdd_81;
    sc_signal< sc_lv<5> > i_1_fu_168_p2;
    sc_signal< sc_lv<5> > i_1_reg_218;
    sc_signal< sc_lv<32> > c_load_reg_223;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_bdd_95;
    sc_signal< sc_lv<32> > grp_fu_174_p2;
    sc_signal< sc_lv<32> > tmp_6_reg_228;
    sc_signal< sc_logic > ap_sig_cseq_ST_st7_fsm_6;
    sc_signal< bool > ap_sig_bdd_104;
    sc_signal< sc_lv<32> > acc_1_fu_179_p2;
    sc_signal< sc_logic > ap_sig_cseq_ST_st8_fsm_7;
    sc_signal< bool > ap_sig_bdd_113;
    sc_signal< sc_lv<32> > acc_reg_91;
    sc_signal< sc_lv<5> > i_reg_104;
    sc_signal< sc_lv<32> > data1_reg_116;
    sc_signal< sc_lv<64> > tmp_3_fu_155_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_160_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_164_p1;
    sc_signal< sc_lv<4> > tmp_7_fu_145_p1;
    sc_signal< sc_lv<4> > tmp_2_fu_149_p2;
    sc_signal< sc_lv<32> > grp_fu_174_p0;
    sc_signal< sc_lv<32> > grp_fu_174_p1;
    sc_signal< sc_logic > ap_sig_cseq_ST_st5_fsm_4;
    sc_signal< bool > ap_sig_bdd_160;
    sc_signal< sc_logic > grp_fu_174_ce;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_st1_fsm_0;
    static const sc_lv<8> ap_ST_st2_fsm_1;
    static const sc_lv<8> ap_ST_st3_fsm_2;
    static const sc_lv<8> ap_ST_st4_fsm_3;
    static const sc_lv<8> ap_ST_st5_fsm_4;
    static const sc_lv<8> ap_ST_st6_fsm_5;
    static const sc_lv<8> ap_ST_st7_fsm_6;
    static const sc_lv<8> ap_ST_st8_fsm_7;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<5> ap_const_lv5_1F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_1_fu_179_p2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_bdd_104();
    void thread_ap_sig_bdd_113();
    void thread_ap_sig_bdd_160();
    void thread_ap_sig_bdd_24();
    void thread_ap_sig_bdd_62();
    void thread_ap_sig_bdd_81();
    void thread_ap_sig_bdd_95();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_ap_sig_cseq_ST_st5_fsm_4();
    void thread_ap_sig_cseq_ST_st7_fsm_6();
    void thread_ap_sig_cseq_ST_st8_fsm_7();
    void thread_c_address0();
    void thread_c_ce0();
    void thread_grp_fu_174_ce();
    void thread_grp_fu_174_p0();
    void thread_grp_fu_174_p1();
    void thread_i_1_fu_168_p2();
    void thread_i_cast_fu_127_p1();
    void thread_shift_reg_address0();
    void thread_shift_reg_ce0();
    void thread_shift_reg_d0();
    void thread_shift_reg_we0();
    void thread_tmp_1_fu_139_p2();
    void thread_tmp_2_fu_149_p2();
    void thread_tmp_3_fu_155_p1();
    void thread_tmp_4_fu_160_p1();
    void thread_tmp_5_fu_164_p1();
    void thread_tmp_7_fu_145_p1();
    void thread_tmp_fu_131_p3();
    void thread_y();
    void thread_y_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
