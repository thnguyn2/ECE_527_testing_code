// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2015_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.430000,HLS_SYN_LAT=15,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=44,HLS_SYN_FF=977,HLS_SYN_LUT=253}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        c_address0,
        c_ce0,
        c_q0,
        x,
        x_ap_vld
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 16'b1;
parameter    ap_ST_st2_fsm_1 = 16'b10;
parameter    ap_ST_st3_fsm_2 = 16'b100;
parameter    ap_ST_st4_fsm_3 = 16'b1000;
parameter    ap_ST_st5_fsm_4 = 16'b10000;
parameter    ap_ST_st6_fsm_5 = 16'b100000;
parameter    ap_ST_st7_fsm_6 = 16'b1000000;
parameter    ap_ST_st8_fsm_7 = 16'b10000000;
parameter    ap_ST_st9_fsm_8 = 16'b100000000;
parameter    ap_ST_st10_fsm_9 = 16'b1000000000;
parameter    ap_ST_st11_fsm_10 = 16'b10000000000;
parameter    ap_ST_st12_fsm_11 = 16'b100000000000;
parameter    ap_ST_st13_fsm_12 = 16'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 16'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 16'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 16'b1000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_9 = 64'b1001;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
output  [3:0] c_address0;
output   c_ce0;
input  [31:0] c_q0;
input  [31:0] x;
input   x_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;
reg[3:0] c_address0;
reg c_ce0;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm = 16'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_32;
reg   [31:0] x_in_sig;
reg   [31:0] x_preg = 32'b00000000000000000000000000000000;
reg    x_ap_vld_in_sig;
reg    x_ap_vld_preg = 1'b0;
reg   [31:0] shift_reg_9 = 32'b00000000000000000000000000000000;
reg   [31:0] shift_reg_8 = 32'b00000000000000000000000000000000;
reg   [31:0] shift_reg_7 = 32'b00000000000000000000000000000000;
reg   [31:0] shift_reg_6 = 32'b00000000000000000000000000000000;
reg   [31:0] shift_reg_5 = 32'b00000000000000000000000000000000;
reg   [31:0] shift_reg_4 = 32'b00000000000000000000000000000000;
reg   [31:0] shift_reg_3 = 32'b00000000000000000000000000000000;
reg   [31:0] shift_reg_2 = 32'b00000000000000000000000000000000;
reg   [31:0] shift_reg_1 = 32'b00000000000000000000000000000000;
reg   [31:0] shift_reg_0 = 32'b00000000000000000000000000000000;
reg  signed [31:0] reg_189;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_73;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_80;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_88;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_96;
reg  signed [31:0] reg_193;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_105;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_112;
reg  signed [31:0] reg_197;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_121;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_128;
reg  signed [31:0] reg_201;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_137;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_144;
wire  signed [31:0] grp_fu_209_p2;
reg  signed [31:0] tmp_6_reg_452;
wire  signed [31:0] grp_fu_225_p2;
reg  signed [31:0] tmp_6_1_reg_457;
wire  signed [31:0] tmp1_fu_279_p2;
reg  signed [31:0] tmp1_reg_487;
reg  signed [31:0] c_load_6_reg_492;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_186;
wire  signed [31:0] grp_fu_241_p2;
reg  signed [31:0] tmp_6_2_reg_502;
wire  signed [31:0] grp_fu_257_p2;
reg  signed [31:0] tmp_6_3_reg_507;
wire  signed [31:0] grp_fu_273_p2;
reg  signed [31:0] tmp_6_4_reg_512;
wire  signed [31:0] tmp2_fu_334_p2;
reg  signed [31:0] tmp2_reg_542;
wire  signed [31:0] grp_fu_293_p2;
reg  signed [31:0] tmp_6_5_reg_552;
wire  signed [31:0] grp_fu_309_p2;
reg  signed [31:0] tmp_6_6_reg_557;
wire  signed [31:0] grp_fu_324_p2;
reg  signed [31:0] tmp_6_7_reg_562;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_223;
wire  signed [31:0] tmp6_fu_383_p2;
reg  signed [31:0] tmp6_reg_582;
wire  signed [31:0] grp_fu_349_p2;
reg  signed [31:0] tmp_6_8_reg_587;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_241;
wire  signed [31:0] grp_fu_365_p2;
reg  signed [31:0] tmp_6_9_reg_592;
wire  signed [31:0] grp_fu_377_p2;
reg  signed [31:0] tmp_6_s_reg_597;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_274;
wire  signed [31:0] grp_fu_209_p0;
wire  signed [31:0] grp_fu_209_p1;
wire  signed [31:0] grp_fu_225_p0;
wire  signed [31:0] grp_fu_225_p1;
wire  signed [31:0] grp_fu_241_p0;
wire  signed [31:0] grp_fu_241_p1;
wire  signed [31:0] grp_fu_257_p0;
wire  signed [31:0] grp_fu_257_p1;
wire  signed [31:0] grp_fu_273_p0;
wire  signed [31:0] grp_fu_273_p1;
wire  signed [31:0] grp_fu_293_p0;
wire  signed [31:0] grp_fu_293_p1;
wire  signed [31:0] grp_fu_309_p0;
wire  signed [31:0] grp_fu_309_p1;
wire  signed [31:0] grp_fu_324_p0;
wire  signed [31:0] grp_fu_324_p1;
wire  signed [31:0] tmp3_fu_330_p2;
wire  signed [31:0] grp_fu_349_p0;
wire  signed [31:0] grp_fu_349_p1;
wire  signed [31:0] grp_fu_365_p0;
wire  signed [31:0] grp_fu_365_p1;
wire  signed [31:0] grp_fu_377_p0;
wire  signed [31:0] grp_fu_377_p1;
wire  signed [31:0] tmp8_fu_395_p2;
wire  signed [31:0] tmp7_fu_399_p2;
wire  signed [31:0] tmp5_fu_391_p2;
wire  signed [31:0] tmp4_fu_404_p2;
wire  signed [31:0] tmp_fu_387_p2;
wire    grp_fu_209_ce;
wire    grp_fu_225_ce;
wire    grp_fu_241_ce;
wire    grp_fu_257_ce;
wire    grp_fu_273_ce;
wire    grp_fu_293_ce;
wire    grp_fu_309_ce;
wire    grp_fu_324_ce;
reg    grp_fu_349_ce;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_361;
reg    grp_fu_365_ce;
reg    grp_fu_377_ce;
reg   [15:0] ap_NS_fsm;


fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U1(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_209_p0 ),
    .din1( grp_fu_209_p1 ),
    .ce( grp_fu_209_ce ),
    .dout( grp_fu_209_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U2(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_225_p0 ),
    .din1( grp_fu_225_p1 ),
    .ce( grp_fu_225_ce ),
    .dout( grp_fu_225_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U3(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_241_p0 ),
    .din1( grp_fu_241_p1 ),
    .ce( grp_fu_241_ce ),
    .dout( grp_fu_241_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U4(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_257_p0 ),
    .din1( grp_fu_257_p1 ),
    .ce( grp_fu_257_ce ),
    .dout( grp_fu_257_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U5(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_273_p0 ),
    .din1( grp_fu_273_p1 ),
    .ce( grp_fu_273_ce ),
    .dout( grp_fu_273_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U6(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_293_p0 ),
    .din1( grp_fu_293_p1 ),
    .ce( grp_fu_293_ce ),
    .dout( grp_fu_293_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U7(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_309_p0 ),
    .din1( grp_fu_309_p1 ),
    .ce( grp_fu_309_ce ),
    .dout( grp_fu_309_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U8(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_324_p0 ),
    .din1( grp_fu_324_p1 ),
    .ce( grp_fu_324_ce ),
    .dout( grp_fu_324_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U9(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_349_p0 ),
    .din1( grp_fu_349_p1 ),
    .ce( grp_fu_349_ce ),
    .dout( grp_fu_349_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U10(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_365_p0 ),
    .din1( grp_fu_365_p1 ),
    .ce( grp_fu_365_ce ),
    .dout( grp_fu_365_p2 )
);

fir_mul_32s_32s_32_3 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fir_mul_32s_32s_32_3_U11(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_377_p0 ),
    .din1( grp_fu_377_p1 ),
    .ce( grp_fu_377_ce ),
    .dout( grp_fu_377_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// x_ap_vld_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_x_ap_vld_preg
    if (ap_rst == 1'b1) begin
        x_ap_vld_preg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
            x_ap_vld_preg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == x_ap_vld) & ~((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_logic_0 == ap_start)))) begin
            x_ap_vld_preg <= x_ap_vld;
        end
    end
end

/// x_preg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_x_preg
    if (ap_rst == 1'b1) begin
        x_preg <= ap_const_lv32_0;
    end else begin
        if (((ap_const_logic_1 == x_ap_vld) & ~((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_logic_0 == ap_start)))) begin
            x_preg <= x;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        c_load_6_reg_492 <= c_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11))) begin
        reg_189 <= c_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6))) begin
        reg_193 <= c_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9))) begin
        reg_197 <= c_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10))) begin
        reg_201 <= c_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(x_ap_vld_in_sig == ap_const_logic_0))) begin
        shift_reg_0 <= x_in_sig;
        shift_reg_1 <= shift_reg_0;
        shift_reg_2 <= shift_reg_1;
        tmp6_reg_582 <= tmp6_fu_383_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        shift_reg_3 <= shift_reg_2;
        shift_reg_4 <= shift_reg_3;
        shift_reg_5 <= shift_reg_4;
        tmp2_reg_542 <= tmp2_fu_334_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        shift_reg_6 <= shift_reg_5;
        shift_reg_7 <= shift_reg_6;
        shift_reg_8 <= shift_reg_7;
        tmp1_reg_487 <= tmp1_fu_279_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        shift_reg_9 <= shift_reg_8;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        tmp_6_1_reg_457 <= grp_fu_225_p2;
        tmp_6_reg_452 <= grp_fu_209_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        tmp_6_2_reg_502 <= grp_fu_241_p2;
        tmp_6_3_reg_507 <= grp_fu_257_p2;
        tmp_6_4_reg_512 <= grp_fu_273_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        tmp_6_5_reg_552 <= grp_fu_293_p2;
        tmp_6_6_reg_557 <= grp_fu_309_p2;
        tmp_6_7_reg_562 <= grp_fu_324_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14)) begin
        tmp_6_8_reg_587 <= grp_fu_349_p2;
        tmp_6_9_reg_592 <= grp_fu_365_p2;
        tmp_6_s_reg_597 <= grp_fu_377_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_sig_cseq_ST_st16_fsm_15)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st16_fsm_15)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_128)
begin
    if (ap_sig_bdd_128) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_144)
begin
    if (ap_sig_bdd_144) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_96)
begin
    if (ap_sig_bdd_96) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_223)
begin
    if (ap_sig_bdd_223) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_361)
begin
    if (ap_sig_bdd_361) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_241)
begin
    if (ap_sig_bdd_241) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_274)
begin
    if (ap_sig_bdd_274) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_32)
begin
    if (ap_sig_bdd_32) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_73)
begin
    if (ap_sig_bdd_73) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_105)
begin
    if (ap_sig_bdd_105) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_121)
begin
    if (ap_sig_bdd_121) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_137)
begin
    if (ap_sig_bdd_137) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_80)
begin
    if (ap_sig_bdd_80) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_112)
begin
    if (ap_sig_bdd_112) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_186)
begin
    if (ap_sig_bdd_186) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_88)
begin
    if (ap_sig_bdd_88) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// c_address0 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st11_fsm_10 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10)) begin
        c_address0 = ap_const_lv64_0;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        c_address0 = ap_const_lv64_1;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        c_address0 = ap_const_lv64_2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        c_address0 = ap_const_lv64_3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        c_address0 = ap_const_lv64_4;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        c_address0 = ap_const_lv64_5;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        c_address0 = ap_const_lv64_6;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        c_address0 = ap_const_lv64_7;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        c_address0 = ap_const_lv64_8;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        c_address0 = ap_const_lv64_9;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        c_address0 = ap_const_lv64_A;
    end else begin
        c_address0 = 'bx;
    end
end

/// c_ce0 assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st9_fsm_8 or ap_sig_cseq_ST_st3_fsm_2 or ap_sig_cseq_ST_st7_fsm_6 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st5_fsm_4 or ap_sig_cseq_ST_st11_fsm_10 or ap_sig_cseq_ST_st8_fsm_7)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        c_ce0 = ap_const_logic_1;
    end else begin
        c_ce0 = ap_const_logic_0;
    end
end

/// grp_fu_349_ce assign process. ///
always @ (x_ap_vld_in_sig or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(x_ap_vld_in_sig == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        grp_fu_349_ce = ap_const_logic_1;
    end else begin
        grp_fu_349_ce = ap_const_logic_0;
    end
end

/// grp_fu_365_ce assign process. ///
always @ (x_ap_vld_in_sig or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(x_ap_vld_in_sig == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        grp_fu_365_ce = ap_const_logic_1;
    end else begin
        grp_fu_365_ce = ap_const_logic_0;
    end
end

/// grp_fu_377_ce assign process. ///
always @ (x_ap_vld_in_sig or ap_sig_cseq_ST_st13_fsm_12 or ap_sig_cseq_ST_st15_fsm_14 or ap_sig_cseq_ST_st14_fsm_13)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) & ~(x_ap_vld_in_sig == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13))) begin
        grp_fu_377_ce = ap_const_logic_1;
    end else begin
        grp_fu_377_ce = ap_const_logic_0;
    end
end

/// x_ap_vld_in_sig assign process. ///
always @ (x_ap_vld or x_ap_vld_preg)
begin
    if ((ap_const_logic_1 == x_ap_vld)) begin
        x_ap_vld_in_sig = x_ap_vld;
    end else begin
        x_ap_vld_in_sig = x_ap_vld_preg;
    end
end

/// x_in_sig assign process. ///
always @ (x or x_preg or x_ap_vld)
begin
    if ((ap_const_logic_1 == x_ap_vld)) begin
        x_in_sig = x;
    end else begin
        x_in_sig = x_preg;
    end
end

/// y_ap_vld assign process. ///
always @ (ap_sig_cseq_ST_st16_fsm_15)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        y_ap_vld = ap_const_logic_1;
    end else begin
        y_ap_vld = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or x_ap_vld_in_sig)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            if (~(x_ap_vld_in_sig == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end else begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_105 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_105 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_112 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_112 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_121 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_121 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_128 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_128 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_137 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_137 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_144 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_144 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_186 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_186 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_223 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_223 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_241 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_241 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_274 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_274 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_32 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_32 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_361 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_361 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_73 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_73 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_80 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_80 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_88 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_88 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_96 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_96 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end
assign grp_fu_209_ce = ap_const_logic_1;
assign grp_fu_209_p0 = reg_189;
assign grp_fu_209_p1 = shift_reg_9;
assign grp_fu_225_ce = ap_const_logic_1;
assign grp_fu_225_p0 = reg_193;
assign grp_fu_225_p1 = shift_reg_8;
assign grp_fu_241_ce = ap_const_logic_1;
assign grp_fu_241_p0 = reg_197;
assign grp_fu_241_p1 = shift_reg_7;
assign grp_fu_257_ce = ap_const_logic_1;
assign grp_fu_257_p0 = reg_201;
assign grp_fu_257_p1 = shift_reg_6;
assign grp_fu_273_ce = ap_const_logic_1;
assign grp_fu_273_p0 = reg_189;
assign grp_fu_273_p1 = shift_reg_5;
assign grp_fu_293_ce = ap_const_logic_1;
assign grp_fu_293_p0 = reg_193;
assign grp_fu_293_p1 = shift_reg_4;
assign grp_fu_309_ce = ap_const_logic_1;
assign grp_fu_309_p0 = c_load_6_reg_492;
assign grp_fu_309_p1 = shift_reg_3;
assign grp_fu_324_ce = ap_const_logic_1;
assign grp_fu_324_p0 = reg_189;
assign grp_fu_324_p1 = shift_reg_2;
assign grp_fu_349_p0 = reg_197;
assign grp_fu_349_p1 = shift_reg_1;
assign grp_fu_365_p0 = reg_201;
assign grp_fu_365_p1 = shift_reg_0;
assign grp_fu_377_p0 = reg_189;
assign grp_fu_377_p1 = x_in_sig;
assign tmp1_fu_279_p2 = ($signed(tmp_6_1_reg_457) + $signed(tmp_6_reg_452));
assign tmp2_fu_334_p2 = ($signed(tmp3_fu_330_p2) + $signed(tmp_6_2_reg_502));
assign tmp3_fu_330_p2 = ($signed(tmp_6_3_reg_507) + $signed(tmp_6_4_reg_512));
assign tmp4_fu_404_p2 = ($signed(tmp7_fu_399_p2) + $signed(tmp5_fu_391_p2));
assign tmp5_fu_391_p2 = ($signed(tmp6_reg_582) + $signed(tmp_6_5_reg_552));
assign tmp6_fu_383_p2 = ($signed(tmp_6_6_reg_557) + $signed(tmp_6_7_reg_562));
assign tmp7_fu_399_p2 = ($signed(tmp8_fu_395_p2) + $signed(tmp_6_8_reg_587));
assign tmp8_fu_395_p2 = ($signed(tmp_6_9_reg_592) + $signed(tmp_6_s_reg_597));
assign tmp_fu_387_p2 = ($signed(tmp2_reg_542) + $signed(tmp1_reg_487));
assign y = ($signed(tmp4_fu_404_p2) + $signed(tmp_fu_387_p2));


endmodule //fir

